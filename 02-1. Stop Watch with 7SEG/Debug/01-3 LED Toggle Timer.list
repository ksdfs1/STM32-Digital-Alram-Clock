
01-3 LED Toggle Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029e8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002b70  08002b70  00003b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b80  08002b80  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002b80  08002b80  00003b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b88  08002b88  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b88  08002b88  00003b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b8c  08002b8c  00003b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002b90  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004010  2**0
                  CONTENTS
 10 .bss          00000070  20000010  20000010  00004010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000080  20000080  00004010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000966c  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a19  00000000  00000000  0000d6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d0  00000000  00000000  0000f0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000783  00000000  00000000  0000fa98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002044c  00000000  00000000  0001021b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bc01  00000000  00000000  00030667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5a76  00000000  00000000  0003c268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00101cde  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027e8  00000000  00000000  00101d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0010450c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b58 	.word	0x08002b58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002b58 	.word	0x08002b58

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <_7SEG_GPIO_Init>:
 */

#include "7seg.h"

void _7SEG_GPIO_Init()
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOA,D,E Periph clock enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	613b      	str	r3, [r7, #16]
 80004fe:	4b6b      	ldr	r3, [pc, #428]	@ (80006ac <_7SEG_GPIO_Init+0x1b8>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000502:	4a6a      	ldr	r2, [pc, #424]	@ (80006ac <_7SEG_GPIO_Init+0x1b8>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	6313      	str	r3, [r2, #48]	@ 0x30
 800050a:	4b68      	ldr	r3, [pc, #416]	@ (80006ac <_7SEG_GPIO_Init+0x1b8>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	613b      	str	r3, [r7, #16]
 8000514:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	4b64      	ldr	r3, [pc, #400]	@ (80006ac <_7SEG_GPIO_Init+0x1b8>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	4a63      	ldr	r2, [pc, #396]	@ (80006ac <_7SEG_GPIO_Init+0x1b8>)
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	6313      	str	r3, [r2, #48]	@ 0x30
 8000526:	4b61      	ldr	r3, [pc, #388]	@ (80006ac <_7SEG_GPIO_Init+0x1b8>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	f003 0304 	and.w	r3, r3, #4
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	4b5d      	ldr	r3, [pc, #372]	@ (80006ac <_7SEG_GPIO_Init+0x1b8>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	4a5c      	ldr	r2, [pc, #368]	@ (80006ac <_7SEG_GPIO_Init+0x1b8>)
 800053c:	f043 0308 	orr.w	r3, r3, #8
 8000540:	6313      	str	r3, [r2, #48]	@ 0x30
 8000542:	4b5a      	ldr	r3, [pc, #360]	@ (80006ac <_7SEG_GPIO_Init+0x1b8>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000546:	f003 0308 	and.w	r3, r3, #8
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	4b56      	ldr	r3, [pc, #344]	@ (80006ac <_7SEG_GPIO_Init+0x1b8>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	4a55      	ldr	r2, [pc, #340]	@ (80006ac <_7SEG_GPIO_Init+0x1b8>)
 8000558:	f043 0310 	orr.w	r3, r3, #16
 800055c:	6313      	str	r3, [r2, #48]	@ 0x30
 800055e:	4b53      	ldr	r3, [pc, #332]	@ (80006ac <_7SEG_GPIO_Init+0x1b8>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	f003 0310 	and.w	r3, r3, #16
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]

	//Digit1
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_A;
 800056a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800056e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000570:	2301      	movs	r3, #1
 8000572:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000574:	2300      	movs	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000578:	2300      	movs	r3, #0
 800057a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIO_DGT1_A, &GPIO_InitStruct);
 800057c:	f107 0314 	add.w	r3, r7, #20
 8000580:	4619      	mov	r1, r3
 8000582:	484b      	ldr	r0, [pc, #300]	@ (80006b0 <_7SEG_GPIO_Init+0x1bc>)
 8000584:	f001 f97c 	bl	8001880 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_B;
 8000588:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800058c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_B, &GPIO_InitStruct);
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	4619      	mov	r1, r3
 8000594:	4847      	ldr	r0, [pc, #284]	@ (80006b4 <_7SEG_GPIO_Init+0x1c0>)
 8000596:	f001 f973 	bl	8001880 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_C;
 800059a:	2340      	movs	r3, #64	@ 0x40
 800059c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_C, &GPIO_InitStruct);
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	4619      	mov	r1, r3
 80005a4:	4842      	ldr	r0, [pc, #264]	@ (80006b0 <_7SEG_GPIO_Init+0x1bc>)
 80005a6:	f001 f96b 	bl	8001880 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_D;
 80005aa:	2320      	movs	r3, #32
 80005ac:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_D, &GPIO_InitStruct);
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	4619      	mov	r1, r3
 80005b4:	483e      	ldr	r0, [pc, #248]	@ (80006b0 <_7SEG_GPIO_Init+0x1bc>)
 80005b6:	f001 f963 	bl	8001880 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_E;
 80005ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80005be:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_E, &GPIO_InitStruct);
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4619      	mov	r1, r3
 80005c6:	483c      	ldr	r0, [pc, #240]	@ (80006b8 <_7SEG_GPIO_Init+0x1c4>)
 80005c8:	f001 f95a 	bl	8001880 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_F;
 80005cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005d0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_F, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	4837      	ldr	r0, [pc, #220]	@ (80006b8 <_7SEG_GPIO_Init+0x1c4>)
 80005da:	f001 f951 	bl	8001880 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_G;
 80005de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005e2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_G, &GPIO_InitStruct);
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	4619      	mov	r1, r3
 80005ea:	4831      	ldr	r0, [pc, #196]	@ (80006b0 <_7SEG_GPIO_Init+0x1bc>)
 80005ec:	f001 f948 	bl	8001880 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_DP;
 80005f0:	2380      	movs	r3, #128	@ 0x80
 80005f2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_DP, &GPIO_InitStruct);
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	4619      	mov	r1, r3
 80005fa:	482d      	ldr	r0, [pc, #180]	@ (80006b0 <_7SEG_GPIO_Init+0x1bc>)
 80005fc:	f001 f940 	bl	8001880 <HAL_GPIO_Init>

	//Digit2
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_A;
 8000600:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000604:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_A, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	482b      	ldr	r0, [pc, #172]	@ (80006bc <_7SEG_GPIO_Init+0x1c8>)
 800060e:	f001 f937 	bl	8001880 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_B;
 8000612:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000616:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_B, &GPIO_InitStruct);
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	4619      	mov	r1, r3
 800061e:	4827      	ldr	r0, [pc, #156]	@ (80006bc <_7SEG_GPIO_Init+0x1c8>)
 8000620:	f001 f92e 	bl	8001880 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_C;
 8000624:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000628:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_C, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	4822      	ldr	r0, [pc, #136]	@ (80006bc <_7SEG_GPIO_Init+0x1c8>)
 8000632:	f001 f925 	bl	8001880 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_D;
 8000636:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800063a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_D, &GPIO_InitStruct);
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4619      	mov	r1, r3
 8000642:	481e      	ldr	r0, [pc, #120]	@ (80006bc <_7SEG_GPIO_Init+0x1c8>)
 8000644:	f001 f91c 	bl	8001880 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_E;
 8000648:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800064c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_E, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	4819      	ldr	r0, [pc, #100]	@ (80006bc <_7SEG_GPIO_Init+0x1c8>)
 8000656:	f001 f913 	bl	8001880 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_F;
 800065a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800065e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_F, &GPIO_InitStruct);
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4619      	mov	r1, r3
 8000666:	4815      	ldr	r0, [pc, #84]	@ (80006bc <_7SEG_GPIO_Init+0x1c8>)
 8000668:	f001 f90a 	bl	8001880 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_G;
 800066c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000670:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_G, &GPIO_InitStruct);
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4619      	mov	r1, r3
 8000678:	4810      	ldr	r0, [pc, #64]	@ (80006bc <_7SEG_GPIO_Init+0x1c8>)
 800067a:	f001 f901 	bl	8001880 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_DP;
 800067e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000682:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_DP, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	480c      	ldr	r0, [pc, #48]	@ (80006bc <_7SEG_GPIO_Init+0x1c8>)
 800068c:	f001 f8f8 	bl	8001880 <HAL_GPIO_Init>

	
	_7SEG_SetNumber(DGT1, 0, ON);
 8000690:	2201      	movs	r2, #1
 8000692:	2100      	movs	r1, #0
 8000694:	2000      	movs	r0, #0
 8000696:	f000 f813 	bl	80006c0 <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, 0, ON);
 800069a:	2201      	movs	r2, #1
 800069c:	2100      	movs	r1, #0
 800069e:	2001      	movs	r0, #1
 80006a0:	f000 f80e 	bl	80006c0 <_7SEG_SetNumber>
}
 80006a4:	bf00      	nop
 80006a6:	3728      	adds	r7, #40	@ 0x28
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40020c00 	.word	0x40020c00
 80006b4:	40020000 	.word	0x40020000
 80006b8:	40020800 	.word	0x40020800
 80006bc:	40021000 	.word	0x40021000

080006c0 <_7SEG_SetNumber>:


void _7SEG_SetNumber(int dgt, int num, int dp)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
	if(dgt == DGT1)
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	f040 81dc 	bne.w	8000a8c <_7SEG_SetNumber+0x3cc>
	{
		switch(num%10)
 80006d4:	68b9      	ldr	r1, [r7, #8]
 80006d6:	4bcb      	ldr	r3, [pc, #812]	@ (8000a04 <_7SEG_SetNumber+0x344>)
 80006d8:	fb83 2301 	smull	r2, r3, r3, r1
 80006dc:	109a      	asrs	r2, r3, #2
 80006de:	17cb      	asrs	r3, r1, #31
 80006e0:	1ad2      	subs	r2, r2, r3
 80006e2:	4613      	mov	r3, r2
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	4413      	add	r3, r2
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	1aca      	subs	r2, r1, r3
 80006ec:	2a09      	cmp	r2, #9
 80006ee:	f200 81ba 	bhi.w	8000a66 <_7SEG_SetNumber+0x3a6>
 80006f2:	a301      	add	r3, pc, #4	@ (adr r3, 80006f8 <_7SEG_SetNumber+0x38>)
 80006f4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80006f8:	08000721 	.word	0x08000721
 80006fc:	08000773 	.word	0x08000773
 8000700:	080007c5 	.word	0x080007c5
 8000704:	08000817 	.word	0x08000817
 8000708:	08000869 	.word	0x08000869
 800070c:	080008bb 	.word	0x080008bb
 8000710:	0800090d 	.word	0x0800090d
 8000714:	0800095f 	.word	0x0800095f
 8000718:	080009b1 	.word	0x080009b1
 800071c:	08000a15 	.word	0x08000a15
		{
			case 0: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON;
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000726:	48b8      	ldr	r0, [pc, #736]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 8000728:	f001 fa5e 	bl	8001be8 <HAL_GPIO_WritePin>
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000732:	48b6      	ldr	r0, [pc, #728]	@ (8000a0c <_7SEG_SetNumber+0x34c>)
 8000734:	f001 fa58 	bl	8001be8 <HAL_GPIO_WritePin>
 8000738:	2200      	movs	r2, #0
 800073a:	2140      	movs	r1, #64	@ 0x40
 800073c:	48b2      	ldr	r0, [pc, #712]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 800073e:	f001 fa53 	bl	8001be8 <HAL_GPIO_WritePin>
 8000742:	2200      	movs	r2, #0
 8000744:	2120      	movs	r1, #32
 8000746:	48b0      	ldr	r0, [pc, #704]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 8000748:	f001 fa4e 	bl	8001be8 <HAL_GPIO_WritePin>
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000752:	48af      	ldr	r0, [pc, #700]	@ (8000a10 <_7SEG_SetNumber+0x350>)
 8000754:	f001 fa48 	bl	8001be8 <HAL_GPIO_WritePin>
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800075e:	48ac      	ldr	r0, [pc, #688]	@ (8000a10 <_7SEG_SetNumber+0x350>)
 8000760:	f001 fa42 	bl	8001be8 <HAL_GPIO_WritePin>
					DGT1_G_OFF;
 8000764:	2201      	movs	r2, #1
 8000766:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800076a:	48a7      	ldr	r0, [pc, #668]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 800076c:	f001 fa3c 	bl	8001be8 <HAL_GPIO_WritePin>
				break;
 8000770:	e179      	b.n	8000a66 <_7SEG_SetNumber+0x3a6>
			case 1: DGT1_B_ON; DGT1_C_ON;
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000778:	48a4      	ldr	r0, [pc, #656]	@ (8000a0c <_7SEG_SetNumber+0x34c>)
 800077a:	f001 fa35 	bl	8001be8 <HAL_GPIO_WritePin>
 800077e:	2200      	movs	r2, #0
 8000780:	2140      	movs	r1, #64	@ 0x40
 8000782:	48a1      	ldr	r0, [pc, #644]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 8000784:	f001 fa30 	bl	8001be8 <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF; DGT1_F_OFF; DGT1_G_OFF;
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800078e:	489e      	ldr	r0, [pc, #632]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 8000790:	f001 fa2a 	bl	8001be8 <HAL_GPIO_WritePin>
 8000794:	2201      	movs	r2, #1
 8000796:	2120      	movs	r1, #32
 8000798:	489b      	ldr	r0, [pc, #620]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 800079a:	f001 fa25 	bl	8001be8 <HAL_GPIO_WritePin>
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007a4:	489a      	ldr	r0, [pc, #616]	@ (8000a10 <_7SEG_SetNumber+0x350>)
 80007a6:	f001 fa1f 	bl	8001be8 <HAL_GPIO_WritePin>
 80007aa:	2201      	movs	r2, #1
 80007ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007b0:	4897      	ldr	r0, [pc, #604]	@ (8000a10 <_7SEG_SetNumber+0x350>)
 80007b2:	f001 fa19 	bl	8001be8 <HAL_GPIO_WritePin>
 80007b6:	2201      	movs	r2, #1
 80007b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007bc:	4892      	ldr	r0, [pc, #584]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 80007be:	f001 fa13 	bl	8001be8 <HAL_GPIO_WritePin>
				break;
 80007c2:	e150      	b.n	8000a66 <_7SEG_SetNumber+0x3a6>
			case 2: DGT1_A_ON; DGT1_B_ON; DGT1_G_ON; DGT1_E_ON; DGT1_D_ON;
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007ca:	488f      	ldr	r0, [pc, #572]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 80007cc:	f001 fa0c 	bl	8001be8 <HAL_GPIO_WritePin>
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007d6:	488d      	ldr	r0, [pc, #564]	@ (8000a0c <_7SEG_SetNumber+0x34c>)
 80007d8:	f001 fa06 	bl	8001be8 <HAL_GPIO_WritePin>
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007e2:	4889      	ldr	r0, [pc, #548]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 80007e4:	f001 fa00 	bl	8001be8 <HAL_GPIO_WritePin>
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007ee:	4888      	ldr	r0, [pc, #544]	@ (8000a10 <_7SEG_SetNumber+0x350>)
 80007f0:	f001 f9fa 	bl	8001be8 <HAL_GPIO_WritePin>
 80007f4:	2200      	movs	r2, #0
 80007f6:	2120      	movs	r1, #32
 80007f8:	4883      	ldr	r0, [pc, #524]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 80007fa:	f001 f9f5 	bl	8001be8 <HAL_GPIO_WritePin>
					DGT1_C_OFF; DGT1_F_OFF;
 80007fe:	2201      	movs	r2, #1
 8000800:	2140      	movs	r1, #64	@ 0x40
 8000802:	4881      	ldr	r0, [pc, #516]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 8000804:	f001 f9f0 	bl	8001be8 <HAL_GPIO_WritePin>
 8000808:	2201      	movs	r2, #1
 800080a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800080e:	4880      	ldr	r0, [pc, #512]	@ (8000a10 <_7SEG_SetNumber+0x350>)
 8000810:	f001 f9ea 	bl	8001be8 <HAL_GPIO_WritePin>
				break;
 8000814:	e127      	b.n	8000a66 <_7SEG_SetNumber+0x3a6>
			case 3: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_G_ON;
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800081c:	487a      	ldr	r0, [pc, #488]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 800081e:	f001 f9e3 	bl	8001be8 <HAL_GPIO_WritePin>
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000828:	4878      	ldr	r0, [pc, #480]	@ (8000a0c <_7SEG_SetNumber+0x34c>)
 800082a:	f001 f9dd 	bl	8001be8 <HAL_GPIO_WritePin>
 800082e:	2200      	movs	r2, #0
 8000830:	2140      	movs	r1, #64	@ 0x40
 8000832:	4875      	ldr	r0, [pc, #468]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 8000834:	f001 f9d8 	bl	8001be8 <HAL_GPIO_WritePin>
 8000838:	2200      	movs	r2, #0
 800083a:	2120      	movs	r1, #32
 800083c:	4872      	ldr	r0, [pc, #456]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 800083e:	f001 f9d3 	bl	8001be8 <HAL_GPIO_WritePin>
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000848:	486f      	ldr	r0, [pc, #444]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 800084a:	f001 f9cd 	bl	8001be8 <HAL_GPIO_WritePin>
					DGT1_E_OFF; DGT1_F_OFF;
 800084e:	2201      	movs	r2, #1
 8000850:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000854:	486e      	ldr	r0, [pc, #440]	@ (8000a10 <_7SEG_SetNumber+0x350>)
 8000856:	f001 f9c7 	bl	8001be8 <HAL_GPIO_WritePin>
 800085a:	2201      	movs	r2, #1
 800085c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000860:	486b      	ldr	r0, [pc, #428]	@ (8000a10 <_7SEG_SetNumber+0x350>)
 8000862:	f001 f9c1 	bl	8001be8 <HAL_GPIO_WritePin>
				break;
 8000866:	e0fe      	b.n	8000a66 <_7SEG_SetNumber+0x3a6>
			case 4: DGT1_F_ON; DGT1_G_ON; DGT1_B_ON; DGT1_C_ON;
 8000868:	2200      	movs	r2, #0
 800086a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800086e:	4868      	ldr	r0, [pc, #416]	@ (8000a10 <_7SEG_SetNumber+0x350>)
 8000870:	f001 f9ba 	bl	8001be8 <HAL_GPIO_WritePin>
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800087a:	4863      	ldr	r0, [pc, #396]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 800087c:	f001 f9b4 	bl	8001be8 <HAL_GPIO_WritePin>
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000886:	4861      	ldr	r0, [pc, #388]	@ (8000a0c <_7SEG_SetNumber+0x34c>)
 8000888:	f001 f9ae 	bl	8001be8 <HAL_GPIO_WritePin>
 800088c:	2200      	movs	r2, #0
 800088e:	2140      	movs	r1, #64	@ 0x40
 8000890:	485d      	ldr	r0, [pc, #372]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 8000892:	f001 f9a9 	bl	8001be8 <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF;
 8000896:	2201      	movs	r2, #1
 8000898:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800089c:	485a      	ldr	r0, [pc, #360]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 800089e:	f001 f9a3 	bl	8001be8 <HAL_GPIO_WritePin>
 80008a2:	2201      	movs	r2, #1
 80008a4:	2120      	movs	r1, #32
 80008a6:	4858      	ldr	r0, [pc, #352]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 80008a8:	f001 f99e 	bl	8001be8 <HAL_GPIO_WritePin>
 80008ac:	2201      	movs	r2, #1
 80008ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008b2:	4857      	ldr	r0, [pc, #348]	@ (8000a10 <_7SEG_SetNumber+0x350>)
 80008b4:	f001 f998 	bl	8001be8 <HAL_GPIO_WritePin>
				break;
 80008b8:	e0d5      	b.n	8000a66 <_7SEG_SetNumber+0x3a6>
			case 5: DGT1_A_ON; DGT1_F_ON; DGT1_G_ON; DGT1_C_ON; DGT1_D_ON;
 80008ba:	2200      	movs	r2, #0
 80008bc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008c0:	4851      	ldr	r0, [pc, #324]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 80008c2:	f001 f991 	bl	8001be8 <HAL_GPIO_WritePin>
 80008c6:	2200      	movs	r2, #0
 80008c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008cc:	4850      	ldr	r0, [pc, #320]	@ (8000a10 <_7SEG_SetNumber+0x350>)
 80008ce:	f001 f98b 	bl	8001be8 <HAL_GPIO_WritePin>
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008d8:	484b      	ldr	r0, [pc, #300]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 80008da:	f001 f985 	bl	8001be8 <HAL_GPIO_WritePin>
 80008de:	2200      	movs	r2, #0
 80008e0:	2140      	movs	r1, #64	@ 0x40
 80008e2:	4849      	ldr	r0, [pc, #292]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 80008e4:	f001 f980 	bl	8001be8 <HAL_GPIO_WritePin>
 80008e8:	2200      	movs	r2, #0
 80008ea:	2120      	movs	r1, #32
 80008ec:	4846      	ldr	r0, [pc, #280]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 80008ee:	f001 f97b 	bl	8001be8 <HAL_GPIO_WritePin>
					DGT1_B_OFF; DGT1_E_OFF;
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008f8:	4844      	ldr	r0, [pc, #272]	@ (8000a0c <_7SEG_SetNumber+0x34c>)
 80008fa:	f001 f975 	bl	8001be8 <HAL_GPIO_WritePin>
 80008fe:	2201      	movs	r2, #1
 8000900:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000904:	4842      	ldr	r0, [pc, #264]	@ (8000a10 <_7SEG_SetNumber+0x350>)
 8000906:	f001 f96f 	bl	8001be8 <HAL_GPIO_WritePin>
				break;
 800090a:	e0ac      	b.n	8000a66 <_7SEG_SetNumber+0x3a6>
			case 6: DGT1_A_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000912:	483d      	ldr	r0, [pc, #244]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 8000914:	f001 f968 	bl	8001be8 <HAL_GPIO_WritePin>
 8000918:	2200      	movs	r2, #0
 800091a:	2140      	movs	r1, #64	@ 0x40
 800091c:	483a      	ldr	r0, [pc, #232]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 800091e:	f001 f963 	bl	8001be8 <HAL_GPIO_WritePin>
 8000922:	2200      	movs	r2, #0
 8000924:	2120      	movs	r1, #32
 8000926:	4838      	ldr	r0, [pc, #224]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 8000928:	f001 f95e 	bl	8001be8 <HAL_GPIO_WritePin>
 800092c:	2200      	movs	r2, #0
 800092e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000932:	4837      	ldr	r0, [pc, #220]	@ (8000a10 <_7SEG_SetNumber+0x350>)
 8000934:	f001 f958 	bl	8001be8 <HAL_GPIO_WritePin>
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800093e:	4834      	ldr	r0, [pc, #208]	@ (8000a10 <_7SEG_SetNumber+0x350>)
 8000940:	f001 f952 	bl	8001be8 <HAL_GPIO_WritePin>
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800094a:	482f      	ldr	r0, [pc, #188]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 800094c:	f001 f94c 	bl	8001be8 <HAL_GPIO_WritePin>
					DGT1_B_OFF;
 8000950:	2201      	movs	r2, #1
 8000952:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000956:	482d      	ldr	r0, [pc, #180]	@ (8000a0c <_7SEG_SetNumber+0x34c>)
 8000958:	f001 f946 	bl	8001be8 <HAL_GPIO_WritePin>
				break;
 800095c:	e083      	b.n	8000a66 <_7SEG_SetNumber+0x3a6>
			case 7: DGT1_F_ON; DGT1_A_ON; DGT1_B_ON; DGT1_C_ON;
 800095e:	2200      	movs	r2, #0
 8000960:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000964:	482a      	ldr	r0, [pc, #168]	@ (8000a10 <_7SEG_SetNumber+0x350>)
 8000966:	f001 f93f 	bl	8001be8 <HAL_GPIO_WritePin>
 800096a:	2200      	movs	r2, #0
 800096c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000970:	4825      	ldr	r0, [pc, #148]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 8000972:	f001 f939 	bl	8001be8 <HAL_GPIO_WritePin>
 8000976:	2200      	movs	r2, #0
 8000978:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800097c:	4823      	ldr	r0, [pc, #140]	@ (8000a0c <_7SEG_SetNumber+0x34c>)
 800097e:	f001 f933 	bl	8001be8 <HAL_GPIO_WritePin>
 8000982:	2200      	movs	r2, #0
 8000984:	2140      	movs	r1, #64	@ 0x40
 8000986:	4820      	ldr	r0, [pc, #128]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 8000988:	f001 f92e 	bl	8001be8 <HAL_GPIO_WritePin>
					DGT1_D_OFF; DGT1_E_OFF; DGT1_G_OFF;
 800098c:	2201      	movs	r2, #1
 800098e:	2120      	movs	r1, #32
 8000990:	481d      	ldr	r0, [pc, #116]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 8000992:	f001 f929 	bl	8001be8 <HAL_GPIO_WritePin>
 8000996:	2201      	movs	r2, #1
 8000998:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800099c:	481c      	ldr	r0, [pc, #112]	@ (8000a10 <_7SEG_SetNumber+0x350>)
 800099e:	f001 f923 	bl	8001be8 <HAL_GPIO_WritePin>
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009a8:	4817      	ldr	r0, [pc, #92]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 80009aa:	f001 f91d 	bl	8001be8 <HAL_GPIO_WritePin>
				break;
 80009ae:	e05a      	b.n	8000a66 <_7SEG_SetNumber+0x3a6>
			case 8: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009b6:	4814      	ldr	r0, [pc, #80]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 80009b8:	f001 f916 	bl	8001be8 <HAL_GPIO_WritePin>
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009c2:	4812      	ldr	r0, [pc, #72]	@ (8000a0c <_7SEG_SetNumber+0x34c>)
 80009c4:	f001 f910 	bl	8001be8 <HAL_GPIO_WritePin>
 80009c8:	2200      	movs	r2, #0
 80009ca:	2140      	movs	r1, #64	@ 0x40
 80009cc:	480e      	ldr	r0, [pc, #56]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 80009ce:	f001 f90b 	bl	8001be8 <HAL_GPIO_WritePin>
 80009d2:	2200      	movs	r2, #0
 80009d4:	2120      	movs	r1, #32
 80009d6:	480c      	ldr	r0, [pc, #48]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 80009d8:	f001 f906 	bl	8001be8 <HAL_GPIO_WritePin>
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009e2:	480b      	ldr	r0, [pc, #44]	@ (8000a10 <_7SEG_SetNumber+0x350>)
 80009e4:	f001 f900 	bl	8001be8 <HAL_GPIO_WritePin>
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ee:	4808      	ldr	r0, [pc, #32]	@ (8000a10 <_7SEG_SetNumber+0x350>)
 80009f0:	f001 f8fa 	bl	8001be8 <HAL_GPIO_WritePin>
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009fa:	4803      	ldr	r0, [pc, #12]	@ (8000a08 <_7SEG_SetNumber+0x348>)
 80009fc:	f001 f8f4 	bl	8001be8 <HAL_GPIO_WritePin>
				break;
 8000a00:	e031      	b.n	8000a66 <_7SEG_SetNumber+0x3a6>
 8000a02:	bf00      	nop
 8000a04:	66666667 	.word	0x66666667
 8000a08:	40020c00 	.word	0x40020c00
 8000a0c:	40020000 	.word	0x40020000
 8000a10:	40020800 	.word	0x40020800
			case 9: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_F_ON; DGT1_G_ON;
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a1a:	48c8      	ldr	r0, [pc, #800]	@ (8000d3c <_7SEG_SetNumber+0x67c>)
 8000a1c:	f001 f8e4 	bl	8001be8 <HAL_GPIO_WritePin>
 8000a20:	2200      	movs	r2, #0
 8000a22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a26:	48c6      	ldr	r0, [pc, #792]	@ (8000d40 <_7SEG_SetNumber+0x680>)
 8000a28:	f001 f8de 	bl	8001be8 <HAL_GPIO_WritePin>
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2140      	movs	r1, #64	@ 0x40
 8000a30:	48c2      	ldr	r0, [pc, #776]	@ (8000d3c <_7SEG_SetNumber+0x67c>)
 8000a32:	f001 f8d9 	bl	8001be8 <HAL_GPIO_WritePin>
 8000a36:	2200      	movs	r2, #0
 8000a38:	2120      	movs	r1, #32
 8000a3a:	48c0      	ldr	r0, [pc, #768]	@ (8000d3c <_7SEG_SetNumber+0x67c>)
 8000a3c:	f001 f8d4 	bl	8001be8 <HAL_GPIO_WritePin>
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a46:	48bf      	ldr	r0, [pc, #764]	@ (8000d44 <_7SEG_SetNumber+0x684>)
 8000a48:	f001 f8ce 	bl	8001be8 <HAL_GPIO_WritePin>
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a52:	48ba      	ldr	r0, [pc, #744]	@ (8000d3c <_7SEG_SetNumber+0x67c>)
 8000a54:	f001 f8c8 	bl	8001be8 <HAL_GPIO_WritePin>
					DGT1_E_OFF;
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a5e:	48b9      	ldr	r0, [pc, #740]	@ (8000d44 <_7SEG_SetNumber+0x684>)
 8000a60:	f001 f8c2 	bl	8001be8 <HAL_GPIO_WritePin>
				break;
 8000a64:	bf00      	nop
		}

		if(dp == ON)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d105      	bne.n	8000a78 <_7SEG_SetNumber+0x3b8>
		{
			DGT1_DP_ON;
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2180      	movs	r1, #128	@ 0x80
 8000a70:	48b2      	ldr	r0, [pc, #712]	@ (8000d3c <_7SEG_SetNumber+0x67c>)
 8000a72:	f001 f8b9 	bl	8001be8 <HAL_GPIO_WritePin>
		else if(dp == OFF)
		{
			DGT2_DP_OFF;
		}
	}
}
 8000a76:	e1ff      	b.n	8000e78 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	f040 81fc 	bne.w	8000e78 <_7SEG_SetNumber+0x7b8>
			DGT1_DP_OFF;
 8000a80:	2201      	movs	r2, #1
 8000a82:	2180      	movs	r1, #128	@ 0x80
 8000a84:	48ad      	ldr	r0, [pc, #692]	@ (8000d3c <_7SEG_SetNumber+0x67c>)
 8000a86:	f001 f8af 	bl	8001be8 <HAL_GPIO_WritePin>
}
 8000a8a:	e1f5      	b.n	8000e78 <_7SEG_SetNumber+0x7b8>
	else if(dgt == DGT2)
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	f040 81f2 	bne.w	8000e78 <_7SEG_SetNumber+0x7b8>
		switch(num%10)
 8000a94:	68b9      	ldr	r1, [r7, #8]
 8000a96:	4bac      	ldr	r3, [pc, #688]	@ (8000d48 <_7SEG_SetNumber+0x688>)
 8000a98:	fb83 2301 	smull	r2, r3, r3, r1
 8000a9c:	109a      	asrs	r2, r3, #2
 8000a9e:	17cb      	asrs	r3, r1, #31
 8000aa0:	1ad2      	subs	r2, r2, r3
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	4413      	add	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	1aca      	subs	r2, r1, r3
 8000aac:	2a09      	cmp	r2, #9
 8000aae:	f200 81d0 	bhi.w	8000e52 <_7SEG_SetNumber+0x792>
 8000ab2:	a301      	add	r3, pc, #4	@ (adr r3, 8000ab8 <_7SEG_SetNumber+0x3f8>)
 8000ab4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000ab8:	08000ae1 	.word	0x08000ae1
 8000abc:	08000b37 	.word	0x08000b37
 8000ac0:	08000b8d 	.word	0x08000b8d
 8000ac4:	08000be3 	.word	0x08000be3
 8000ac8:	08000c39 	.word	0x08000c39
 8000acc:	08000c8f 	.word	0x08000c8f
 8000ad0:	08000ce5 	.word	0x08000ce5
 8000ad4:	08000d51 	.word	0x08000d51
 8000ad8:	08000da7 	.word	0x08000da7
 8000adc:	08000dfd 	.word	0x08000dfd
			case 0: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON;
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ae6:	4899      	ldr	r0, [pc, #612]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000ae8:	f001 f87e 	bl	8001be8 <HAL_GPIO_WritePin>
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000af2:	4896      	ldr	r0, [pc, #600]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000af4:	f001 f878 	bl	8001be8 <HAL_GPIO_WritePin>
 8000af8:	2200      	movs	r2, #0
 8000afa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000afe:	4893      	ldr	r0, [pc, #588]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000b00:	f001 f872 	bl	8001be8 <HAL_GPIO_WritePin>
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b0a:	4890      	ldr	r0, [pc, #576]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000b0c:	f001 f86c 	bl	8001be8 <HAL_GPIO_WritePin>
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b16:	488d      	ldr	r0, [pc, #564]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000b18:	f001 f866 	bl	8001be8 <HAL_GPIO_WritePin>
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b22:	488a      	ldr	r0, [pc, #552]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000b24:	f001 f860 	bl	8001be8 <HAL_GPIO_WritePin>
					DGT2_G_OFF;
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b2e:	4887      	ldr	r0, [pc, #540]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000b30:	f001 f85a 	bl	8001be8 <HAL_GPIO_WritePin>
				break;
 8000b34:	e18d      	b.n	8000e52 <_7SEG_SetNumber+0x792>
			case 1: DGT2_B_ON; DGT2_C_ON;
 8000b36:	2200      	movs	r2, #0
 8000b38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b3c:	4883      	ldr	r0, [pc, #524]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000b3e:	f001 f853 	bl	8001be8 <HAL_GPIO_WritePin>
 8000b42:	2200      	movs	r2, #0
 8000b44:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b48:	4880      	ldr	r0, [pc, #512]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000b4a:	f001 f84d 	bl	8001be8 <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF; DGT2_F_OFF; DGT2_G_OFF;
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b54:	487d      	ldr	r0, [pc, #500]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000b56:	f001 f847 	bl	8001be8 <HAL_GPIO_WritePin>
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b60:	487a      	ldr	r0, [pc, #488]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000b62:	f001 f841 	bl	8001be8 <HAL_GPIO_WritePin>
 8000b66:	2201      	movs	r2, #1
 8000b68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b6c:	4877      	ldr	r0, [pc, #476]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000b6e:	f001 f83b 	bl	8001be8 <HAL_GPIO_WritePin>
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b78:	4874      	ldr	r0, [pc, #464]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000b7a:	f001 f835 	bl	8001be8 <HAL_GPIO_WritePin>
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b84:	4871      	ldr	r0, [pc, #452]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000b86:	f001 f82f 	bl	8001be8 <HAL_GPIO_WritePin>
				break;
 8000b8a:	e162      	b.n	8000e52 <_7SEG_SetNumber+0x792>
			case 2: DGT2_A_ON; DGT2_B_ON; DGT2_G_ON; DGT2_E_ON; DGT2_D_ON;
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b92:	486e      	ldr	r0, [pc, #440]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000b94:	f001 f828 	bl	8001be8 <HAL_GPIO_WritePin>
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b9e:	486b      	ldr	r0, [pc, #428]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000ba0:	f001 f822 	bl	8001be8 <HAL_GPIO_WritePin>
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000baa:	4868      	ldr	r0, [pc, #416]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000bac:	f001 f81c 	bl	8001be8 <HAL_GPIO_WritePin>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bb6:	4865      	ldr	r0, [pc, #404]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000bb8:	f001 f816 	bl	8001be8 <HAL_GPIO_WritePin>
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bc2:	4862      	ldr	r0, [pc, #392]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000bc4:	f001 f810 	bl	8001be8 <HAL_GPIO_WritePin>
					DGT2_C_OFF; DGT2_F_OFF;
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bce:	485f      	ldr	r0, [pc, #380]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000bd0:	f001 f80a 	bl	8001be8 <HAL_GPIO_WritePin>
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bda:	485c      	ldr	r0, [pc, #368]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000bdc:	f001 f804 	bl	8001be8 <HAL_GPIO_WritePin>
				break;
 8000be0:	e137      	b.n	8000e52 <_7SEG_SetNumber+0x792>
			case 3: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_G_ON;
 8000be2:	2200      	movs	r2, #0
 8000be4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000be8:	4858      	ldr	r0, [pc, #352]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000bea:	f000 fffd 	bl	8001be8 <HAL_GPIO_WritePin>
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bf4:	4855      	ldr	r0, [pc, #340]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000bf6:	f000 fff7 	bl	8001be8 <HAL_GPIO_WritePin>
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c00:	4852      	ldr	r0, [pc, #328]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000c02:	f000 fff1 	bl	8001be8 <HAL_GPIO_WritePin>
 8000c06:	2200      	movs	r2, #0
 8000c08:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c0c:	484f      	ldr	r0, [pc, #316]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000c0e:	f000 ffeb 	bl	8001be8 <HAL_GPIO_WritePin>
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c18:	484c      	ldr	r0, [pc, #304]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000c1a:	f000 ffe5 	bl	8001be8 <HAL_GPIO_WritePin>
					DGT2_E_OFF; DGT2_F_OFF;
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c24:	4849      	ldr	r0, [pc, #292]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000c26:	f000 ffdf 	bl	8001be8 <HAL_GPIO_WritePin>
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c30:	4846      	ldr	r0, [pc, #280]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000c32:	f000 ffd9 	bl	8001be8 <HAL_GPIO_WritePin>
				break;
 8000c36:	e10c      	b.n	8000e52 <_7SEG_SetNumber+0x792>
			case 4: DGT2_F_ON; DGT2_G_ON; DGT2_B_ON; DGT2_C_ON;
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c3e:	4843      	ldr	r0, [pc, #268]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000c40:	f000 ffd2 	bl	8001be8 <HAL_GPIO_WritePin>
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c4a:	4840      	ldr	r0, [pc, #256]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000c4c:	f000 ffcc 	bl	8001be8 <HAL_GPIO_WritePin>
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c56:	483d      	ldr	r0, [pc, #244]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000c58:	f000 ffc6 	bl	8001be8 <HAL_GPIO_WritePin>
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c62:	483a      	ldr	r0, [pc, #232]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000c64:	f000 ffc0 	bl	8001be8 <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF;
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c6e:	4837      	ldr	r0, [pc, #220]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000c70:	f000 ffba 	bl	8001be8 <HAL_GPIO_WritePin>
 8000c74:	2201      	movs	r2, #1
 8000c76:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c7a:	4834      	ldr	r0, [pc, #208]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000c7c:	f000 ffb4 	bl	8001be8 <HAL_GPIO_WritePin>
 8000c80:	2201      	movs	r2, #1
 8000c82:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c86:	4831      	ldr	r0, [pc, #196]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000c88:	f000 ffae 	bl	8001be8 <HAL_GPIO_WritePin>
				break;
 8000c8c:	e0e1      	b.n	8000e52 <_7SEG_SetNumber+0x792>
			case 5: DGT2_A_ON; DGT2_F_ON; DGT2_G_ON; DGT2_C_ON; DGT2_D_ON;
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c94:	482d      	ldr	r0, [pc, #180]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000c96:	f000 ffa7 	bl	8001be8 <HAL_GPIO_WritePin>
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ca0:	482a      	ldr	r0, [pc, #168]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000ca2:	f000 ffa1 	bl	8001be8 <HAL_GPIO_WritePin>
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cac:	4827      	ldr	r0, [pc, #156]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000cae:	f000 ff9b 	bl	8001be8 <HAL_GPIO_WritePin>
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cb8:	4824      	ldr	r0, [pc, #144]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000cba:	f000 ff95 	bl	8001be8 <HAL_GPIO_WritePin>
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cc4:	4821      	ldr	r0, [pc, #132]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000cc6:	f000 ff8f 	bl	8001be8 <HAL_GPIO_WritePin>
					DGT2_B_OFF; DGT2_E_OFF;
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cd0:	481e      	ldr	r0, [pc, #120]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000cd2:	f000 ff89 	bl	8001be8 <HAL_GPIO_WritePin>
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cdc:	481b      	ldr	r0, [pc, #108]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000cde:	f000 ff83 	bl	8001be8 <HAL_GPIO_WritePin>
				break;
 8000ce2:	e0b6      	b.n	8000e52 <_7SEG_SetNumber+0x792>
			case 6: DGT2_A_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cea:	4818      	ldr	r0, [pc, #96]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000cec:	f000 ff7c 	bl	8001be8 <HAL_GPIO_WritePin>
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cf6:	4815      	ldr	r0, [pc, #84]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000cf8:	f000 ff76 	bl	8001be8 <HAL_GPIO_WritePin>
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d02:	4812      	ldr	r0, [pc, #72]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000d04:	f000 ff70 	bl	8001be8 <HAL_GPIO_WritePin>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d0e:	480f      	ldr	r0, [pc, #60]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000d10:	f000 ff6a 	bl	8001be8 <HAL_GPIO_WritePin>
 8000d14:	2200      	movs	r2, #0
 8000d16:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d1a:	480c      	ldr	r0, [pc, #48]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000d1c:	f000 ff64 	bl	8001be8 <HAL_GPIO_WritePin>
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d26:	4809      	ldr	r0, [pc, #36]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000d28:	f000 ff5e 	bl	8001be8 <HAL_GPIO_WritePin>
					DGT2_B_OFF;
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d32:	4806      	ldr	r0, [pc, #24]	@ (8000d4c <_7SEG_SetNumber+0x68c>)
 8000d34:	f000 ff58 	bl	8001be8 <HAL_GPIO_WritePin>
				break;
 8000d38:	e08b      	b.n	8000e52 <_7SEG_SetNumber+0x792>
 8000d3a:	bf00      	nop
 8000d3c:	40020c00 	.word	0x40020c00
 8000d40:	40020000 	.word	0x40020000
 8000d44:	40020800 	.word	0x40020800
 8000d48:	66666667 	.word	0x66666667
 8000d4c:	40021000 	.word	0x40021000
			case 7: DGT2_F_ON; DGT2_A_ON; DGT2_B_ON; DGT2_C_ON;
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d56:	484a      	ldr	r0, [pc, #296]	@ (8000e80 <_7SEG_SetNumber+0x7c0>)
 8000d58:	f000 ff46 	bl	8001be8 <HAL_GPIO_WritePin>
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d62:	4847      	ldr	r0, [pc, #284]	@ (8000e80 <_7SEG_SetNumber+0x7c0>)
 8000d64:	f000 ff40 	bl	8001be8 <HAL_GPIO_WritePin>
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d6e:	4844      	ldr	r0, [pc, #272]	@ (8000e80 <_7SEG_SetNumber+0x7c0>)
 8000d70:	f000 ff3a 	bl	8001be8 <HAL_GPIO_WritePin>
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d7a:	4841      	ldr	r0, [pc, #260]	@ (8000e80 <_7SEG_SetNumber+0x7c0>)
 8000d7c:	f000 ff34 	bl	8001be8 <HAL_GPIO_WritePin>
					DGT2_D_OFF; DGT2_E_OFF; DGT2_G_OFF;
 8000d80:	2201      	movs	r2, #1
 8000d82:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d86:	483e      	ldr	r0, [pc, #248]	@ (8000e80 <_7SEG_SetNumber+0x7c0>)
 8000d88:	f000 ff2e 	bl	8001be8 <HAL_GPIO_WritePin>
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d92:	483b      	ldr	r0, [pc, #236]	@ (8000e80 <_7SEG_SetNumber+0x7c0>)
 8000d94:	f000 ff28 	bl	8001be8 <HAL_GPIO_WritePin>
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d9e:	4838      	ldr	r0, [pc, #224]	@ (8000e80 <_7SEG_SetNumber+0x7c0>)
 8000da0:	f000 ff22 	bl	8001be8 <HAL_GPIO_WritePin>
				break;
 8000da4:	e055      	b.n	8000e52 <_7SEG_SetNumber+0x792>
			case 8: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dac:	4834      	ldr	r0, [pc, #208]	@ (8000e80 <_7SEG_SetNumber+0x7c0>)
 8000dae:	f000 ff1b 	bl	8001be8 <HAL_GPIO_WritePin>
 8000db2:	2200      	movs	r2, #0
 8000db4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000db8:	4831      	ldr	r0, [pc, #196]	@ (8000e80 <_7SEG_SetNumber+0x7c0>)
 8000dba:	f000 ff15 	bl	8001be8 <HAL_GPIO_WritePin>
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dc4:	482e      	ldr	r0, [pc, #184]	@ (8000e80 <_7SEG_SetNumber+0x7c0>)
 8000dc6:	f000 ff0f 	bl	8001be8 <HAL_GPIO_WritePin>
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dd0:	482b      	ldr	r0, [pc, #172]	@ (8000e80 <_7SEG_SetNumber+0x7c0>)
 8000dd2:	f000 ff09 	bl	8001be8 <HAL_GPIO_WritePin>
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ddc:	4828      	ldr	r0, [pc, #160]	@ (8000e80 <_7SEG_SetNumber+0x7c0>)
 8000dde:	f000 ff03 	bl	8001be8 <HAL_GPIO_WritePin>
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000de8:	4825      	ldr	r0, [pc, #148]	@ (8000e80 <_7SEG_SetNumber+0x7c0>)
 8000dea:	f000 fefd 	bl	8001be8 <HAL_GPIO_WritePin>
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000df4:	4822      	ldr	r0, [pc, #136]	@ (8000e80 <_7SEG_SetNumber+0x7c0>)
 8000df6:	f000 fef7 	bl	8001be8 <HAL_GPIO_WritePin>
				break;
 8000dfa:	e02a      	b.n	8000e52 <_7SEG_SetNumber+0x792>
			case 9: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_F_ON; DGT2_G_ON;
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e02:	481f      	ldr	r0, [pc, #124]	@ (8000e80 <_7SEG_SetNumber+0x7c0>)
 8000e04:	f000 fef0 	bl	8001be8 <HAL_GPIO_WritePin>
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e0e:	481c      	ldr	r0, [pc, #112]	@ (8000e80 <_7SEG_SetNumber+0x7c0>)
 8000e10:	f000 feea 	bl	8001be8 <HAL_GPIO_WritePin>
 8000e14:	2200      	movs	r2, #0
 8000e16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e1a:	4819      	ldr	r0, [pc, #100]	@ (8000e80 <_7SEG_SetNumber+0x7c0>)
 8000e1c:	f000 fee4 	bl	8001be8 <HAL_GPIO_WritePin>
 8000e20:	2200      	movs	r2, #0
 8000e22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e26:	4816      	ldr	r0, [pc, #88]	@ (8000e80 <_7SEG_SetNumber+0x7c0>)
 8000e28:	f000 fede 	bl	8001be8 <HAL_GPIO_WritePin>
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e32:	4813      	ldr	r0, [pc, #76]	@ (8000e80 <_7SEG_SetNumber+0x7c0>)
 8000e34:	f000 fed8 	bl	8001be8 <HAL_GPIO_WritePin>
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e3e:	4810      	ldr	r0, [pc, #64]	@ (8000e80 <_7SEG_SetNumber+0x7c0>)
 8000e40:	f000 fed2 	bl	8001be8 <HAL_GPIO_WritePin>
					DGT2_E_OFF;
 8000e44:	2201      	movs	r2, #1
 8000e46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e4a:	480d      	ldr	r0, [pc, #52]	@ (8000e80 <_7SEG_SetNumber+0x7c0>)
 8000e4c:	f000 fecc 	bl	8001be8 <HAL_GPIO_WritePin>
				break;
 8000e50:	bf00      	nop
		if(dp == ON)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d106      	bne.n	8000e66 <_7SEG_SetNumber+0x7a6>
			DGT2_DP_ON;
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e5e:	4808      	ldr	r0, [pc, #32]	@ (8000e80 <_7SEG_SetNumber+0x7c0>)
 8000e60:	f000 fec2 	bl	8001be8 <HAL_GPIO_WritePin>
}
 8000e64:	e008      	b.n	8000e78 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d105      	bne.n	8000e78 <_7SEG_SetNumber+0x7b8>
			DGT2_DP_OFF;
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e72:	4803      	ldr	r0, [pc, #12]	@ (8000e80 <_7SEG_SetNumber+0x7c0>)
 8000e74:	f000 feb8 	bl	8001be8 <HAL_GPIO_WritePin>
}
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40021000 	.word	0x40021000

08000e84 <MX_GPIO_Init>:
        * EXTI
     PD8   ------> USART3_TX
     PD9   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	@ 0x28
 8000e88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	4b5d      	ldr	r3, [pc, #372]	@ (8001014 <MX_GPIO_Init+0x190>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4a5c      	ldr	r2, [pc, #368]	@ (8001014 <MX_GPIO_Init+0x190>)
 8000ea4:	f043 0310 	orr.w	r3, r3, #16
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eaa:	4b5a      	ldr	r3, [pc, #360]	@ (8001014 <MX_GPIO_Init+0x190>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	f003 0310 	and.w	r3, r3, #16
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b56      	ldr	r3, [pc, #344]	@ (8001014 <MX_GPIO_Init+0x190>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a55      	ldr	r2, [pc, #340]	@ (8001014 <MX_GPIO_Init+0x190>)
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	4b53      	ldr	r3, [pc, #332]	@ (8001014 <MX_GPIO_Init+0x190>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	4b4f      	ldr	r3, [pc, #316]	@ (8001014 <MX_GPIO_Init+0x190>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	4a4e      	ldr	r2, [pc, #312]	@ (8001014 <MX_GPIO_Init+0x190>)
 8000edc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee2:	4b4c      	ldr	r3, [pc, #304]	@ (8001014 <MX_GPIO_Init+0x190>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	4b48      	ldr	r3, [pc, #288]	@ (8001014 <MX_GPIO_Init+0x190>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	4a47      	ldr	r2, [pc, #284]	@ (8001014 <MX_GPIO_Init+0x190>)
 8000ef8:	f043 0302 	orr.w	r3, r3, #2
 8000efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efe:	4b45      	ldr	r3, [pc, #276]	@ (8001014 <MX_GPIO_Init+0x190>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	603b      	str	r3, [r7, #0]
 8000f0e:	4b41      	ldr	r3, [pc, #260]	@ (8001014 <MX_GPIO_Init+0x190>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	4a40      	ldr	r2, [pc, #256]	@ (8001014 <MX_GPIO_Init+0x190>)
 8000f14:	f043 0308 	orr.w	r3, r3, #8
 8000f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001014 <MX_GPIO_Init+0x190>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	f003 0308 	and.w	r3, r3, #8
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2121      	movs	r1, #33	@ 0x21
 8000f2a:	483b      	ldr	r0, [pc, #236]	@ (8001018 <MX_GPIO_Init+0x194>)
 8000f2c:	f000 fe5c 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8000f36:	4839      	ldr	r0, [pc, #228]	@ (800101c <MX_GPIO_Init+0x198>)
 8000f38:	f000 fe56 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2140      	movs	r1, #64	@ 0x40
 8000f40:	4837      	ldr	r0, [pc, #220]	@ (8001020 <MX_GPIO_Init+0x19c>)
 8000f42:	f000 fe51 	bl	8001be8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f46:	2308      	movs	r3, #8
 8000f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	4832      	ldr	r0, [pc, #200]	@ (8001024 <MX_GPIO_Init+0x1a0>)
 8000f5a:	f000 fc91 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	482b      	ldr	r0, [pc, #172]	@ (8001020 <MX_GPIO_Init+0x19c>)
 8000f74:	f000 fc84 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8000f78:	2321      	movs	r3, #33	@ 0x21
 8000f7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4822      	ldr	r0, [pc, #136]	@ (8001018 <MX_GPIO_Init+0x194>)
 8000f90:	f000 fc76 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f94:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	481a      	ldr	r0, [pc, #104]	@ (800101c <MX_GPIO_Init+0x198>)
 8000fb2:	f000 fc65 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8000fb6:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8000fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4814      	ldr	r0, [pc, #80]	@ (800101c <MX_GPIO_Init+0x198>)
 8000fcc:	f000 fc58 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000fd0:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480c      	ldr	r0, [pc, #48]	@ (800101c <MX_GPIO_Init+0x198>)
 8000fea:	f000 fc49 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fee:	2340      	movs	r3, #64	@ 0x40
 8000ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4806      	ldr	r0, [pc, #24]	@ (8001020 <MX_GPIO_Init+0x19c>)
 8001006:	f000 fc3b 	bl	8001880 <HAL_GPIO_Init>

}
 800100a:	bf00      	nop
 800100c:	3728      	adds	r7, #40	@ 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800
 8001018:	40020400 	.word	0x40020400
 800101c:	40020c00 	.word	0x40020c00
 8001020:	40020800 	.word	0x40020800
 8001024:	40021000 	.word	0x40021000

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102c:	f000 faa4 	bl	8001578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001030:	f000 f8e0 	bl	80011f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001034:	f7ff ff26 	bl	8000e84 <MX_GPIO_Init>
  MX_TIM6_Init();
 8001038:	f000 fa1c 	bl	8001474 <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800103c:	f000 f944 	bl	80012c8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001046:	485e      	ldr	r0, [pc, #376]	@ (80011c0 <main+0x198>)
 8001048:	f000 fdce 	bl	8001be8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001052:	485b      	ldr	r0, [pc, #364]	@ (80011c0 <main+0x198>)
 8001054:	f000 fdc8 	bl	8001be8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800105e:	4858      	ldr	r0, [pc, #352]	@ (80011c0 <main+0x198>)
 8001060:	f000 fdc2 	bl	8001be8 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	2140      	movs	r1, #64	@ 0x40
 8001068:	4856      	ldr	r0, [pc, #344]	@ (80011c4 <main+0x19c>)
 800106a:	f000 fdbd 	bl	8001be8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800106e:	2201      	movs	r2, #1
 8001070:	2120      	movs	r1, #32
 8001072:	4855      	ldr	r0, [pc, #340]	@ (80011c8 <main+0x1a0>)
 8001074:	f000 fdb8 	bl	8001be8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001078:	2201      	movs	r2, #1
 800107a:	2101      	movs	r1, #1
 800107c:	4852      	ldr	r0, [pc, #328]	@ (80011c8 <main+0x1a0>)
 800107e:	f000 fdb3 	bl	8001be8 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim6);
 8001082:	4852      	ldr	r0, [pc, #328]	@ (80011cc <main+0x1a4>)
 8001084:	f001 fa7e 	bl	8002584 <HAL_TIM_Base_Start_IT>

  _7SEG_GPIO_Init();
 8001088:	f7ff fa34 	bl	80004f4 <_7SEG_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SW1_Mode = DetectSwitchMode();
 800108c:	f000 f928 	bl	80012e0 <DetectSwitchMode>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	4b4e      	ldr	r3, [pc, #312]	@ (80011d0 <main+0x1a8>)
 8001096:	701a      	strb	r2, [r3, #0]
	  switch(SW1_Mode)
 8001098:	4b4d      	ldr	r3, [pc, #308]	@ (80011d0 <main+0x1a8>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b03      	cmp	r3, #3
 800109e:	f200 8089 	bhi.w	80011b4 <main+0x18c>
 80010a2:	a201      	add	r2, pc, #4	@ (adr r2, 80010a8 <main+0x80>)
 80010a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a8:	080011b5 	.word	0x080011b5
 80010ac:	080010b9 	.word	0x080010b9
 80010b0:	080010f1 	.word	0x080010f1
 80010b4:	0800112b 	.word	0x0800112b
	  {
	  	  case 0: break;
	  	  case 1:
	  		  Pin_State = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12);
 80010b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010bc:	4840      	ldr	r0, [pc, #256]	@ (80011c0 <main+0x198>)
 80010be:	f000 fd7b 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80010c2:	4603      	mov	r3, r0
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b43      	ldr	r3, [pc, #268]	@ (80011d4 <main+0x1ac>)
 80010c8:	701a      	strb	r2, [r3, #0]
	  		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, Pin_State = (GPIO_PinState)(!Pin_State));
 80010ca:	4b42      	ldr	r3, [pc, #264]	@ (80011d4 <main+0x1ac>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	bf0c      	ite	eq
 80010d2:	2301      	moveq	r3, #1
 80010d4:	2300      	movne	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	4b3e      	ldr	r3, [pc, #248]	@ (80011d4 <main+0x1ac>)
 80010dc:	701a      	strb	r2, [r3, #0]
 80010de:	4b3d      	ldr	r3, [pc, #244]	@ (80011d4 <main+0x1ac>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010e8:	4835      	ldr	r0, [pc, #212]	@ (80011c0 <main+0x198>)
 80010ea:	f000 fd7d 	bl	8001be8 <HAL_GPIO_WritePin>
			  break;
 80010ee:	e061      	b.n	80011b4 <main+0x18c>
	  	  case 2:
	  		  Pin_State = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 80010f0:	2140      	movs	r1, #64	@ 0x40
 80010f2:	4834      	ldr	r0, [pc, #208]	@ (80011c4 <main+0x19c>)
 80010f4:	f000 fd60 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b35      	ldr	r3, [pc, #212]	@ (80011d4 <main+0x1ac>)
 80010fe:	701a      	strb	r2, [r3, #0]
	  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, Pin_State = (GPIO_PinState)(!Pin_State));
 8001100:	4b34      	ldr	r3, [pc, #208]	@ (80011d4 <main+0x1ac>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	bf0c      	ite	eq
 8001108:	2301      	moveq	r3, #1
 800110a:	2300      	movne	r3, #0
 800110c:	b2db      	uxtb	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	4b30      	ldr	r3, [pc, #192]	@ (80011d4 <main+0x1ac>)
 8001112:	701a      	strb	r2, [r3, #0]
 8001114:	4b2f      	ldr	r3, [pc, #188]	@ (80011d4 <main+0x1ac>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	2140      	movs	r1, #64	@ 0x40
 800111c:	4829      	ldr	r0, [pc, #164]	@ (80011c4 <main+0x19c>)
 800111e:	f000 fd63 	bl	8001be8 <HAL_GPIO_WritePin>

	  		  cnt = 0;
 8001122:	4b2d      	ldr	r3, [pc, #180]	@ (80011d8 <main+0x1b0>)
 8001124:	2200      	movs	r2, #0
 8001126:	801a      	strh	r2, [r3, #0]
	  		  break;
 8001128:	e044      	b.n	80011b4 <main+0x18c>
	  	  case 3:
	  		  dot = ((cnt % 1000) < 500) ? ON : OFF;
 800112a:	4b2b      	ldr	r3, [pc, #172]	@ (80011d8 <main+0x1b0>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	4a2b      	ldr	r2, [pc, #172]	@ (80011dc <main+0x1b4>)
 8001130:	fba2 1203 	umull	r1, r2, r2, r3
 8001134:	0992      	lsrs	r2, r2, #6
 8001136:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800113a:	fb01 f202 	mul.w	r2, r1, r2
 800113e:	1a9b      	subs	r3, r3, r2
 8001140:	b29b      	uxth	r3, r3
 8001142:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001146:	4293      	cmp	r3, r2
 8001148:	bf94      	ite	ls
 800114a:	2301      	movls	r3, #1
 800114c:	2300      	movhi	r3, #0
 800114e:	b2db      	uxtb	r3, r3
 8001150:	461a      	mov	r2, r3
 8001152:	4b23      	ldr	r3, [pc, #140]	@ (80011e0 <main+0x1b8>)
 8001154:	701a      	strb	r2, [r3, #0]
	  		  _7SEG_SetNumber(DGT1, (cnt / 1000) % 10, dot);
 8001156:	4b20      	ldr	r3, [pc, #128]	@ (80011d8 <main+0x1b0>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	4a20      	ldr	r2, [pc, #128]	@ (80011dc <main+0x1b4>)
 800115c:	fba2 2303 	umull	r2, r3, r2, r3
 8001160:	099b      	lsrs	r3, r3, #6
 8001162:	b29a      	uxth	r2, r3
 8001164:	4b1f      	ldr	r3, [pc, #124]	@ (80011e4 <main+0x1bc>)
 8001166:	fba3 1302 	umull	r1, r3, r3, r2
 800116a:	08d9      	lsrs	r1, r3, #3
 800116c:	460b      	mov	r3, r1
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	440b      	add	r3, r1
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	b29b      	uxth	r3, r3
 8001178:	4619      	mov	r1, r3
 800117a:	4b19      	ldr	r3, [pc, #100]	@ (80011e0 <main+0x1b8>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff fa9d 	bl	80006c0 <_7SEG_SetNumber>
	  		  _7SEG_SetNumber(DGT2, (cnt % 1000) / 100, OFF);
 8001186:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <main+0x1b0>)
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	4a14      	ldr	r2, [pc, #80]	@ (80011dc <main+0x1b4>)
 800118c:	fba2 1203 	umull	r1, r2, r2, r3
 8001190:	0992      	lsrs	r2, r2, #6
 8001192:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001196:	fb01 f202 	mul.w	r2, r1, r2
 800119a:	1a9b      	subs	r3, r3, r2
 800119c:	b29b      	uxth	r3, r3
 800119e:	4a12      	ldr	r2, [pc, #72]	@ (80011e8 <main+0x1c0>)
 80011a0:	fba2 2303 	umull	r2, r3, r2, r3
 80011a4:	095b      	lsrs	r3, r3, #5
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	2200      	movs	r2, #0
 80011aa:	4619      	mov	r1, r3
 80011ac:	2001      	movs	r0, #1
 80011ae:	f7ff fa87 	bl	80006c0 <_7SEG_SetNumber>
	  		  break;
 80011b2:	bf00      	nop
	  }
	  Prev_SW1_State = Curr_SW1_State;
 80011b4:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <main+0x1c4>)
 80011b6:	781a      	ldrb	r2, [r3, #0]
 80011b8:	4b0d      	ldr	r3, [pc, #52]	@ (80011f0 <main+0x1c8>)
 80011ba:	701a      	strb	r2, [r3, #0]
	  SW1_Mode = DetectSwitchMode();
 80011bc:	e766      	b.n	800108c <main+0x64>
 80011be:	bf00      	nop
 80011c0:	40020c00 	.word	0x40020c00
 80011c4:	40020800 	.word	0x40020800
 80011c8:	40020400 	.word	0x40020400
 80011cc:	20000034 	.word	0x20000034
 80011d0:	2000002f 	.word	0x2000002f
 80011d4:	2000002e 	.word	0x2000002e
 80011d8:	20000030 	.word	0x20000030
 80011dc:	10624dd3 	.word	0x10624dd3
 80011e0:	20000000 	.word	0x20000000
 80011e4:	cccccccd 	.word	0xcccccccd
 80011e8:	51eb851f 	.word	0x51eb851f
 80011ec:	2000002d 	.word	0x2000002d
 80011f0:	2000002c 	.word	0x2000002c

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b094      	sub	sp, #80	@ 0x50
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 0320 	add.w	r3, r7, #32
 80011fe:	2230      	movs	r2, #48	@ 0x30
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f001 fc7c 	bl	8002b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	4b28      	ldr	r3, [pc, #160]	@ (80012c0 <SystemClock_Config+0xcc>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001220:	4a27      	ldr	r2, [pc, #156]	@ (80012c0 <SystemClock_Config+0xcc>)
 8001222:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001226:	6413      	str	r3, [r2, #64]	@ 0x40
 8001228:	4b25      	ldr	r3, [pc, #148]	@ (80012c0 <SystemClock_Config+0xcc>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	4b22      	ldr	r3, [pc, #136]	@ (80012c4 <SystemClock_Config+0xd0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a21      	ldr	r2, [pc, #132]	@ (80012c4 <SystemClock_Config+0xd0>)
 800123e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b1f      	ldr	r3, [pc, #124]	@ (80012c4 <SystemClock_Config+0xd0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001250:	2301      	movs	r3, #1
 8001252:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001254:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125a:	2302      	movs	r3, #2
 800125c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001262:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001264:	2304      	movs	r3, #4
 8001266:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001268:	23a8      	movs	r3, #168	@ 0xa8
 800126a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800126c:	2302      	movs	r3, #2
 800126e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001270:	2304      	movs	r3, #4
 8001272:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001274:	f107 0320 	add.w	r3, r7, #32
 8001278:	4618      	mov	r0, r3
 800127a:	f000 fccf 	bl	8001c1c <HAL_RCC_OscConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001284:	f000 f87c 	bl	8001380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001288:	230f      	movs	r3, #15
 800128a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128c:	2302      	movs	r3, #2
 800128e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001294:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001298:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800129a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800129e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	2105      	movs	r1, #5
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 ff30 	bl	800210c <HAL_RCC_ClockConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012b2:	f000 f865 	bl	8001380 <Error_Handler>
  }
}
 80012b6:	bf00      	nop
 80012b8:	3750      	adds	r7, #80	@ 0x50
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40007000 	.word	0x40007000

080012c8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2100      	movs	r1, #0
 80012d0:	2036      	movs	r0, #54	@ 0x36
 80012d2:	f000 fa9e 	bl	8001812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012d6:	2036      	movs	r0, #54	@ 0x36
 80012d8:	f000 fab7 	bl	800184a <HAL_NVIC_EnableIRQ>
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}

080012e0 <DetectSwitchMode>:

/* USER CODE BEGIN 4 */
SW_MODE DetectSwitchMode(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	Curr_SW1_State =  HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3);
 80012e4:	2108      	movs	r1, #8
 80012e6:	4813      	ldr	r0, [pc, #76]	@ (8001334 <DetectSwitchMode+0x54>)
 80012e8:	f000 fc66 	bl	8001bb8 <HAL_GPIO_ReadPin>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <DetectSwitchMode+0x58>)
 80012f2:	701a      	strb	r2, [r3, #0]
	switch ((Prev_SW1_State << 1) | Curr_SW1_State)
 80012f4:	4b11      	ldr	r3, [pc, #68]	@ (800133c <DetectSwitchMode+0x5c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001338 <DetectSwitchMode+0x58>)
 80012fc:	7812      	ldrb	r2, [r2, #0]
 80012fe:	4313      	orrs	r3, r2
 8001300:	2b03      	cmp	r3, #3
 8001302:	d813      	bhi.n	800132c <DetectSwitchMode+0x4c>
 8001304:	a201      	add	r2, pc, #4	@ (adr r2, 800130c <DetectSwitchMode+0x2c>)
 8001306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800130a:	bf00      	nop
 800130c:	0800131d 	.word	0x0800131d
 8001310:	08001321 	.word	0x08001321
 8001314:	08001325 	.word	0x08001325
 8001318:	08001329 	.word	0x08001329
	{
		case 0: return RELEASE_IDLE;   // 0b00
 800131c:	2300      	movs	r3, #0
 800131e:	e006      	b.n	800132e <DetectSwitchMode+0x4e>
		case 1: return PRESS_EDGE;     // 0b01
 8001320:	2301      	movs	r3, #1
 8001322:	e004      	b.n	800132e <DetectSwitchMode+0x4e>
		case 2: return RELEASE_EDGE;   // 0b10
 8001324:	2302      	movs	r3, #2
 8001326:	e002      	b.n	800132e <DetectSwitchMode+0x4e>
		case 3: return PRESS_HOLD;     // 0b11
 8001328:	2303      	movs	r3, #3
 800132a:	e000      	b.n	800132e <DetectSwitchMode+0x4e>
		default: return RELEASE_IDLE;
 800132c:	2300      	movs	r3, #0
	}
}
 800132e:	4618      	mov	r0, r3
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000
 8001338:	2000002d 	.word	0x2000002d
 800133c:	2000002c 	.word	0x2000002c

08001340 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6 && SW1_Mode == PRESS_HOLD) cnt++;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a09      	ldr	r2, [pc, #36]	@ (8001374 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d109      	bne.n	8001366 <HAL_TIM_PeriodElapsedCallback+0x26>
 8001352:	4b09      	ldr	r3, [pc, #36]	@ (8001378 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b03      	cmp	r3, #3
 8001358:	d105      	bne.n	8001366 <HAL_TIM_PeriodElapsedCallback+0x26>
 800135a:	4b08      	ldr	r3, [pc, #32]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800135c:	881b      	ldrh	r3, [r3, #0]
 800135e:	3301      	adds	r3, #1
 8001360:	b29a      	uxth	r2, r3
 8001362:	4b06      	ldr	r3, [pc, #24]	@ (800137c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001364:	801a      	strh	r2, [r3, #0]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40001000 	.word	0x40001000
 8001378:	2000002f 	.word	0x2000002f
 800137c:	20000030 	.word	0x20000030

08001380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001384:	b672      	cpsid	i
}
 8001386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <Error_Handler+0x8>

0800138c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <HAL_MspInit+0x4c>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139a:	4a0f      	ldr	r2, [pc, #60]	@ (80013d8 <HAL_MspInit+0x4c>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013a2:	4b0d      	ldr	r3, [pc, #52]	@ (80013d8 <HAL_MspInit+0x4c>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <HAL_MspInit+0x4c>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b6:	4a08      	ldr	r2, [pc, #32]	@ (80013d8 <HAL_MspInit+0x4c>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013be:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <HAL_MspInit+0x4c>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800

080013dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <NMI_Handler+0x4>

080013e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <MemManage_Handler+0x4>

080013f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <UsageFault_Handler+0x4>

08001404 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001432:	f000 f8f3 	bl	800161c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001440:	4802      	ldr	r0, [pc, #8]	@ (800144c <TIM6_DAC_IRQHandler+0x10>)
 8001442:	f001 f90f 	bl	8002664 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000034 	.word	0x20000034

08001450 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001454:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <SystemInit+0x20>)
 8001456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800145a:	4a05      	ldr	r2, [pc, #20]	@ (8001470 <SystemInit+0x20>)
 800145c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001460:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147a:	463b      	mov	r3, r7
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <MX_TIM6_Init+0x64>)
 8001484:	4a15      	ldr	r2, [pc, #84]	@ (80014dc <MX_TIM6_Init+0x68>)
 8001486:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 8001488:	4b13      	ldr	r3, [pc, #76]	@ (80014d8 <MX_TIM6_Init+0x64>)
 800148a:	2263      	movs	r2, #99	@ 0x63
 800148c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148e:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <MX_TIM6_Init+0x64>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 840-1;
 8001494:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <MX_TIM6_Init+0x64>)
 8001496:	f240 3247 	movw	r2, #839	@ 0x347
 800149a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149c:	4b0e      	ldr	r3, [pc, #56]	@ (80014d8 <MX_TIM6_Init+0x64>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80014a2:	480d      	ldr	r0, [pc, #52]	@ (80014d8 <MX_TIM6_Init+0x64>)
 80014a4:	f001 f81e 	bl	80024e4 <HAL_TIM_Base_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80014ae:	f7ff ff67 	bl	8001380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014ba:	463b      	mov	r3, r7
 80014bc:	4619      	mov	r1, r3
 80014be:	4806      	ldr	r0, [pc, #24]	@ (80014d8 <MX_TIM6_Init+0x64>)
 80014c0:	f001 fa8e 	bl	80029e0 <HAL_TIMEx_MasterConfigSynchronization>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80014ca:	f7ff ff59 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000034 	.word	0x20000034
 80014dc:	40001000 	.word	0x40001000

080014e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a0b      	ldr	r2, [pc, #44]	@ (800151c <HAL_TIM_Base_MspInit+0x3c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d10d      	bne.n	800150e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <HAL_TIM_Base_MspInit+0x40>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	4a09      	ldr	r2, [pc, #36]	@ (8001520 <HAL_TIM_Base_MspInit+0x40>)
 80014fc:	f043 0310 	orr.w	r3, r3, #16
 8001500:	6413      	str	r3, [r2, #64]	@ 0x40
 8001502:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <HAL_TIM_Base_MspInit+0x40>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	f003 0310 	and.w	r3, r3, #16
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40001000 	.word	0x40001000
 8001520:	40023800 	.word	0x40023800

08001524 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001524:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800155c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001528:	f7ff ff92 	bl	8001450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800152c:	480c      	ldr	r0, [pc, #48]	@ (8001560 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800152e:	490d      	ldr	r1, [pc, #52]	@ (8001564 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001530:	4a0d      	ldr	r2, [pc, #52]	@ (8001568 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001534:	e002      	b.n	800153c <LoopCopyDataInit>

08001536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153a:	3304      	adds	r3, #4

0800153c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800153c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001540:	d3f9      	bcc.n	8001536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001542:	4a0a      	ldr	r2, [pc, #40]	@ (800156c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001544:	4c0a      	ldr	r4, [pc, #40]	@ (8001570 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001548:	e001      	b.n	800154e <LoopFillZerobss>

0800154a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800154c:	3204      	adds	r2, #4

0800154e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001550:	d3fb      	bcc.n	800154a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001552:	f001 fadd 	bl	8002b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001556:	f7ff fd67 	bl	8001028 <main>
  bx  lr    
 800155a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800155c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001564:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001568:	08002b90 	.word	0x08002b90
  ldr r2, =_sbss
 800156c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001570:	20000080 	.word	0x20000080

08001574 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001574:	e7fe      	b.n	8001574 <ADC_IRQHandler>
	...

08001578 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800157c:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <HAL_Init+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0d      	ldr	r2, [pc, #52]	@ (80015b8 <HAL_Init+0x40>)
 8001582:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001586:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001588:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <HAL_Init+0x40>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <HAL_Init+0x40>)
 800158e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001592:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001594:	4b08      	ldr	r3, [pc, #32]	@ (80015b8 <HAL_Init+0x40>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a07      	ldr	r2, [pc, #28]	@ (80015b8 <HAL_Init+0x40>)
 800159a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800159e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a0:	2003      	movs	r0, #3
 80015a2:	f000 f92b 	bl	80017fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015a6:	200f      	movs	r0, #15
 80015a8:	f000 f808 	bl	80015bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ac:	f7ff feee 	bl	800138c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023c00 	.word	0x40023c00

080015bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c4:	4b12      	ldr	r3, [pc, #72]	@ (8001610 <HAL_InitTick+0x54>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <HAL_InitTick+0x58>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4619      	mov	r1, r3
 80015ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 f943 	bl	8001866 <HAL_SYSTICK_Config>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00e      	b.n	8001608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b0f      	cmp	r3, #15
 80015ee:	d80a      	bhi.n	8001606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f0:	2200      	movs	r2, #0
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	f000 f90b 	bl	8001812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015fc:	4a06      	ldr	r2, [pc, #24]	@ (8001618 <HAL_InitTick+0x5c>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	e000      	b.n	8001608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000004 	.word	0x20000004
 8001614:	2000000c 	.word	0x2000000c
 8001618:	20000008 	.word	0x20000008

0800161c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <HAL_IncTick+0x20>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <HAL_IncTick+0x24>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4413      	add	r3, r2
 800162c:	4a04      	ldr	r2, [pc, #16]	@ (8001640 <HAL_IncTick+0x24>)
 800162e:	6013      	str	r3, [r2, #0]
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	2000000c 	.word	0x2000000c
 8001640:	2000007c 	.word	0x2000007c

08001644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return uwTick;
 8001648:	4b03      	ldr	r3, [pc, #12]	@ (8001658 <HAL_GetTick+0x14>)
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	2000007c 	.word	0x2000007c

0800165c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001678:	4013      	ands	r3, r2
 800167a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001684:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800168c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168e:	4a04      	ldr	r2, [pc, #16]	@ (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	60d3      	str	r3, [r2, #12]
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a8:	4b04      	ldr	r3, [pc, #16]	@ (80016bc <__NVIC_GetPriorityGrouping+0x18>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	0a1b      	lsrs	r3, r3, #8
 80016ae:	f003 0307 	and.w	r3, r3, #7
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	db0b      	blt.n	80016ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	f003 021f 	and.w	r2, r3, #31
 80016d8:	4907      	ldr	r1, [pc, #28]	@ (80016f8 <__NVIC_EnableIRQ+0x38>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	095b      	lsrs	r3, r3, #5
 80016e0:	2001      	movs	r0, #1
 80016e2:	fa00 f202 	lsl.w	r2, r0, r2
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000e100 	.word	0xe000e100

080016fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	6039      	str	r1, [r7, #0]
 8001706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170c:	2b00      	cmp	r3, #0
 800170e:	db0a      	blt.n	8001726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	b2da      	uxtb	r2, r3
 8001714:	490c      	ldr	r1, [pc, #48]	@ (8001748 <__NVIC_SetPriority+0x4c>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	0112      	lsls	r2, r2, #4
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	440b      	add	r3, r1
 8001720:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001724:	e00a      	b.n	800173c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4908      	ldr	r1, [pc, #32]	@ (800174c <__NVIC_SetPriority+0x50>)
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	3b04      	subs	r3, #4
 8001734:	0112      	lsls	r2, r2, #4
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	440b      	add	r3, r1
 800173a:	761a      	strb	r2, [r3, #24]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000e100 	.word	0xe000e100
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001750:	b480      	push	{r7}
 8001752:	b089      	sub	sp, #36	@ 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f1c3 0307 	rsb	r3, r3, #7
 800176a:	2b04      	cmp	r3, #4
 800176c:	bf28      	it	cs
 800176e:	2304      	movcs	r3, #4
 8001770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3304      	adds	r3, #4
 8001776:	2b06      	cmp	r3, #6
 8001778:	d902      	bls.n	8001780 <NVIC_EncodePriority+0x30>
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3b03      	subs	r3, #3
 800177e:	e000      	b.n	8001782 <NVIC_EncodePriority+0x32>
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	f04f 32ff 	mov.w	r2, #4294967295
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43da      	mvns	r2, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	401a      	ands	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001798:	f04f 31ff 	mov.w	r1, #4294967295
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	fa01 f303 	lsl.w	r3, r1, r3
 80017a2:	43d9      	mvns	r1, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	4313      	orrs	r3, r2
         );
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3724      	adds	r7, #36	@ 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017c8:	d301      	bcc.n	80017ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00f      	b.n	80017ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ce:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <SysTick_Config+0x40>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d6:	210f      	movs	r1, #15
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	f7ff ff8e 	bl	80016fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e0:	4b05      	ldr	r3, [pc, #20]	@ (80017f8 <SysTick_Config+0x40>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017e6:	4b04      	ldr	r3, [pc, #16]	@ (80017f8 <SysTick_Config+0x40>)
 80017e8:	2207      	movs	r2, #7
 80017ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	e000e010 	.word	0xe000e010

080017fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff ff29 	bl	800165c <__NVIC_SetPriorityGrouping>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	4603      	mov	r3, r0
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
 800181e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001824:	f7ff ff3e 	bl	80016a4 <__NVIC_GetPriorityGrouping>
 8001828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	6978      	ldr	r0, [r7, #20]
 8001830:	f7ff ff8e 	bl	8001750 <NVIC_EncodePriority>
 8001834:	4602      	mov	r2, r0
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff5d 	bl	80016fc <__NVIC_SetPriority>
}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff31 	bl	80016c0 <__NVIC_EnableIRQ>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ffa2 	bl	80017b8 <SysTick_Config>
 8001874:	4603      	mov	r3, r0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	@ 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	e16b      	b.n	8001b74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800189c:	2201      	movs	r2, #1
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	f040 815a 	bne.w	8001b6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d005      	beq.n	80018d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d130      	bne.n	8001934 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	2203      	movs	r2, #3
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001908:	2201      	movs	r2, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 0201 	and.w	r2, r3, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	2b03      	cmp	r3, #3
 800193e:	d017      	beq.n	8001970 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	2203      	movs	r2, #3
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d123      	bne.n	80019c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	08da      	lsrs	r2, r3, #3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3208      	adds	r2, #8
 8001984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	08da      	lsrs	r2, r3, #3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3208      	adds	r2, #8
 80019be:	69b9      	ldr	r1, [r7, #24]
 80019c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0203 	and.w	r2, r3, #3
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 80b4 	beq.w	8001b6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b60      	ldr	r3, [pc, #384]	@ (8001b8c <HAL_GPIO_Init+0x30c>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0e:	4a5f      	ldr	r2, [pc, #380]	@ (8001b8c <HAL_GPIO_Init+0x30c>)
 8001a10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a16:	4b5d      	ldr	r3, [pc, #372]	@ (8001b8c <HAL_GPIO_Init+0x30c>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a22:	4a5b      	ldr	r2, [pc, #364]	@ (8001b90 <HAL_GPIO_Init+0x310>)
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	089b      	lsrs	r3, r3, #2
 8001a28:	3302      	adds	r3, #2
 8001a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	220f      	movs	r2, #15
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a52      	ldr	r2, [pc, #328]	@ (8001b94 <HAL_GPIO_Init+0x314>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d02b      	beq.n	8001aa6 <HAL_GPIO_Init+0x226>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a51      	ldr	r2, [pc, #324]	@ (8001b98 <HAL_GPIO_Init+0x318>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d025      	beq.n	8001aa2 <HAL_GPIO_Init+0x222>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a50      	ldr	r2, [pc, #320]	@ (8001b9c <HAL_GPIO_Init+0x31c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d01f      	beq.n	8001a9e <HAL_GPIO_Init+0x21e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4f      	ldr	r2, [pc, #316]	@ (8001ba0 <HAL_GPIO_Init+0x320>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d019      	beq.n	8001a9a <HAL_GPIO_Init+0x21a>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4e      	ldr	r2, [pc, #312]	@ (8001ba4 <HAL_GPIO_Init+0x324>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d013      	beq.n	8001a96 <HAL_GPIO_Init+0x216>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4d      	ldr	r2, [pc, #308]	@ (8001ba8 <HAL_GPIO_Init+0x328>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d00d      	beq.n	8001a92 <HAL_GPIO_Init+0x212>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a4c      	ldr	r2, [pc, #304]	@ (8001bac <HAL_GPIO_Init+0x32c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d007      	beq.n	8001a8e <HAL_GPIO_Init+0x20e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a4b      	ldr	r2, [pc, #300]	@ (8001bb0 <HAL_GPIO_Init+0x330>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d101      	bne.n	8001a8a <HAL_GPIO_Init+0x20a>
 8001a86:	2307      	movs	r3, #7
 8001a88:	e00e      	b.n	8001aa8 <HAL_GPIO_Init+0x228>
 8001a8a:	2308      	movs	r3, #8
 8001a8c:	e00c      	b.n	8001aa8 <HAL_GPIO_Init+0x228>
 8001a8e:	2306      	movs	r3, #6
 8001a90:	e00a      	b.n	8001aa8 <HAL_GPIO_Init+0x228>
 8001a92:	2305      	movs	r3, #5
 8001a94:	e008      	b.n	8001aa8 <HAL_GPIO_Init+0x228>
 8001a96:	2304      	movs	r3, #4
 8001a98:	e006      	b.n	8001aa8 <HAL_GPIO_Init+0x228>
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e004      	b.n	8001aa8 <HAL_GPIO_Init+0x228>
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	e002      	b.n	8001aa8 <HAL_GPIO_Init+0x228>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <HAL_GPIO_Init+0x228>
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	69fa      	ldr	r2, [r7, #28]
 8001aaa:	f002 0203 	and.w	r2, r2, #3
 8001aae:	0092      	lsls	r2, r2, #2
 8001ab0:	4093      	lsls	r3, r2
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ab8:	4935      	ldr	r1, [pc, #212]	@ (8001b90 <HAL_GPIO_Init+0x310>)
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	089b      	lsrs	r3, r3, #2
 8001abe:	3302      	adds	r3, #2
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8001bb4 <HAL_GPIO_Init+0x334>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aea:	4a32      	ldr	r2, [pc, #200]	@ (8001bb4 <HAL_GPIO_Init+0x334>)
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001af0:	4b30      	ldr	r3, [pc, #192]	@ (8001bb4 <HAL_GPIO_Init+0x334>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b14:	4a27      	ldr	r2, [pc, #156]	@ (8001bb4 <HAL_GPIO_Init+0x334>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b1a:	4b26      	ldr	r3, [pc, #152]	@ (8001bb4 <HAL_GPIO_Init+0x334>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	43db      	mvns	r3, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4013      	ands	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b3e:	4a1d      	ldr	r2, [pc, #116]	@ (8001bb4 <HAL_GPIO_Init+0x334>)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b44:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb4 <HAL_GPIO_Init+0x334>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b68:	4a12      	ldr	r2, [pc, #72]	@ (8001bb4 <HAL_GPIO_Init+0x334>)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3301      	adds	r3, #1
 8001b72:	61fb      	str	r3, [r7, #28]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	2b0f      	cmp	r3, #15
 8001b78:	f67f ae90 	bls.w	800189c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	3724      	adds	r7, #36	@ 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40013800 	.word	0x40013800
 8001b94:	40020000 	.word	0x40020000
 8001b98:	40020400 	.word	0x40020400
 8001b9c:	40020800 	.word	0x40020800
 8001ba0:	40020c00 	.word	0x40020c00
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40021400 	.word	0x40021400
 8001bac:	40021800 	.word	0x40021800
 8001bb0:	40021c00 	.word	0x40021c00
 8001bb4:	40013c00 	.word	0x40013c00

08001bb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691a      	ldr	r2, [r3, #16]
 8001bc8:	887b      	ldrh	r3, [r7, #2]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d002      	beq.n	8001bd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	73fb      	strb	r3, [r7, #15]
 8001bd4:	e001      	b.n	8001bda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf8:	787b      	ldrb	r3, [r7, #1]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bfe:	887a      	ldrh	r2, [r7, #2]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c04:	e003      	b.n	8001c0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c06:	887b      	ldrh	r3, [r7, #2]
 8001c08:	041a      	lsls	r2, r3, #16
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	619a      	str	r2, [r3, #24]
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e267      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d075      	beq.n	8001d26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c3a:	4b88      	ldr	r3, [pc, #544]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d00c      	beq.n	8001c60 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c46:	4b85      	ldr	r3, [pc, #532]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d112      	bne.n	8001c78 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c52:	4b82      	ldr	r3, [pc, #520]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c5e:	d10b      	bne.n	8001c78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c60:	4b7e      	ldr	r3, [pc, #504]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d05b      	beq.n	8001d24 <HAL_RCC_OscConfig+0x108>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d157      	bne.n	8001d24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e242      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c80:	d106      	bne.n	8001c90 <HAL_RCC_OscConfig+0x74>
 8001c82:	4b76      	ldr	r3, [pc, #472]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a75      	ldr	r2, [pc, #468]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e01d      	b.n	8001ccc <HAL_RCC_OscConfig+0xb0>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c98:	d10c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x98>
 8001c9a:	4b70      	ldr	r3, [pc, #448]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a6f      	ldr	r2, [pc, #444]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001ca0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	4b6d      	ldr	r3, [pc, #436]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a6c      	ldr	r2, [pc, #432]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	e00b      	b.n	8001ccc <HAL_RCC_OscConfig+0xb0>
 8001cb4:	4b69      	ldr	r3, [pc, #420]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a68      	ldr	r2, [pc, #416]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001cba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	4b66      	ldr	r3, [pc, #408]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a65      	ldr	r2, [pc, #404]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001cc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d013      	beq.n	8001cfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fcb6 	bl	8001644 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cdc:	f7ff fcb2 	bl	8001644 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b64      	cmp	r3, #100	@ 0x64
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e207      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	4b5b      	ldr	r3, [pc, #364]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0xc0>
 8001cfa:	e014      	b.n	8001d26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fca2 	bl	8001644 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d04:	f7ff fc9e 	bl	8001644 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	@ 0x64
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e1f3      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d16:	4b51      	ldr	r3, [pc, #324]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0xe8>
 8001d22:	e000      	b.n	8001d26 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d063      	beq.n	8001dfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d32:	4b4a      	ldr	r3, [pc, #296]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00b      	beq.n	8001d56 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d3e:	4b47      	ldr	r3, [pc, #284]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d11c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d4a:	4b44      	ldr	r3, [pc, #272]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d116      	bne.n	8001d84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d56:	4b41      	ldr	r3, [pc, #260]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d005      	beq.n	8001d6e <HAL_RCC_OscConfig+0x152>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d001      	beq.n	8001d6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e1c7      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4937      	ldr	r1, [pc, #220]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d82:	e03a      	b.n	8001dfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d020      	beq.n	8001dce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d8c:	4b34      	ldr	r3, [pc, #208]	@ (8001e60 <HAL_RCC_OscConfig+0x244>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d92:	f7ff fc57 	bl	8001644 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d9a:	f7ff fc53 	bl	8001644 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e1a8      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dac:	4b2b      	ldr	r3, [pc, #172]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db8:	4b28      	ldr	r3, [pc, #160]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4925      	ldr	r1, [pc, #148]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]
 8001dcc:	e015      	b.n	8001dfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dce:	4b24      	ldr	r3, [pc, #144]	@ (8001e60 <HAL_RCC_OscConfig+0x244>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7ff fc36 	bl	8001644 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ddc:	f7ff fc32 	bl	8001644 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e187      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dee:	4b1b      	ldr	r3, [pc, #108]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d036      	beq.n	8001e74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d016      	beq.n	8001e3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e0e:	4b15      	ldr	r3, [pc, #84]	@ (8001e64 <HAL_RCC_OscConfig+0x248>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e14:	f7ff fc16 	bl	8001644 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1c:	f7ff fc12 	bl	8001644 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e167      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e5c <HAL_RCC_OscConfig+0x240>)
 8001e30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0x200>
 8001e3a:	e01b      	b.n	8001e74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e3c:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <HAL_RCC_OscConfig+0x248>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e42:	f7ff fbff 	bl	8001644 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e48:	e00e      	b.n	8001e68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4a:	f7ff fbfb 	bl	8001644 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d907      	bls.n	8001e68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e150      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	42470000 	.word	0x42470000
 8001e64:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e68:	4b88      	ldr	r3, [pc, #544]	@ (800208c <HAL_RCC_OscConfig+0x470>)
 8001e6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1ea      	bne.n	8001e4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 8097 	beq.w	8001fb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e86:	4b81      	ldr	r3, [pc, #516]	@ (800208c <HAL_RCC_OscConfig+0x470>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10f      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	4b7d      	ldr	r3, [pc, #500]	@ (800208c <HAL_RCC_OscConfig+0x470>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	4a7c      	ldr	r2, [pc, #496]	@ (800208c <HAL_RCC_OscConfig+0x470>)
 8001e9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ea0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ea2:	4b7a      	ldr	r3, [pc, #488]	@ (800208c <HAL_RCC_OscConfig+0x470>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb2:	4b77      	ldr	r3, [pc, #476]	@ (8002090 <HAL_RCC_OscConfig+0x474>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d118      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ebe:	4b74      	ldr	r3, [pc, #464]	@ (8002090 <HAL_RCC_OscConfig+0x474>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a73      	ldr	r2, [pc, #460]	@ (8002090 <HAL_RCC_OscConfig+0x474>)
 8001ec4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eca:	f7ff fbbb 	bl	8001644 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed2:	f7ff fbb7 	bl	8001644 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e10c      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee4:	4b6a      	ldr	r3, [pc, #424]	@ (8002090 <HAL_RCC_OscConfig+0x474>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f0      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d106      	bne.n	8001f06 <HAL_RCC_OscConfig+0x2ea>
 8001ef8:	4b64      	ldr	r3, [pc, #400]	@ (800208c <HAL_RCC_OscConfig+0x470>)
 8001efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001efc:	4a63      	ldr	r2, [pc, #396]	@ (800208c <HAL_RCC_OscConfig+0x470>)
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f04:	e01c      	b.n	8001f40 <HAL_RCC_OscConfig+0x324>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b05      	cmp	r3, #5
 8001f0c:	d10c      	bne.n	8001f28 <HAL_RCC_OscConfig+0x30c>
 8001f0e:	4b5f      	ldr	r3, [pc, #380]	@ (800208c <HAL_RCC_OscConfig+0x470>)
 8001f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f12:	4a5e      	ldr	r2, [pc, #376]	@ (800208c <HAL_RCC_OscConfig+0x470>)
 8001f14:	f043 0304 	orr.w	r3, r3, #4
 8001f18:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f1a:	4b5c      	ldr	r3, [pc, #368]	@ (800208c <HAL_RCC_OscConfig+0x470>)
 8001f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f1e:	4a5b      	ldr	r2, [pc, #364]	@ (800208c <HAL_RCC_OscConfig+0x470>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f26:	e00b      	b.n	8001f40 <HAL_RCC_OscConfig+0x324>
 8001f28:	4b58      	ldr	r3, [pc, #352]	@ (800208c <HAL_RCC_OscConfig+0x470>)
 8001f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f2c:	4a57      	ldr	r2, [pc, #348]	@ (800208c <HAL_RCC_OscConfig+0x470>)
 8001f2e:	f023 0301 	bic.w	r3, r3, #1
 8001f32:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f34:	4b55      	ldr	r3, [pc, #340]	@ (800208c <HAL_RCC_OscConfig+0x470>)
 8001f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f38:	4a54      	ldr	r2, [pc, #336]	@ (800208c <HAL_RCC_OscConfig+0x470>)
 8001f3a:	f023 0304 	bic.w	r3, r3, #4
 8001f3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d015      	beq.n	8001f74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f48:	f7ff fb7c 	bl	8001644 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4e:	e00a      	b.n	8001f66 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f50:	f7ff fb78 	bl	8001644 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e0cb      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f66:	4b49      	ldr	r3, [pc, #292]	@ (800208c <HAL_RCC_OscConfig+0x470>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0ee      	beq.n	8001f50 <HAL_RCC_OscConfig+0x334>
 8001f72:	e014      	b.n	8001f9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f74:	f7ff fb66 	bl	8001644 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7c:	f7ff fb62 	bl	8001644 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e0b5      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f92:	4b3e      	ldr	r3, [pc, #248]	@ (800208c <HAL_RCC_OscConfig+0x470>)
 8001f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1ee      	bne.n	8001f7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f9e:	7dfb      	ldrb	r3, [r7, #23]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d105      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa4:	4b39      	ldr	r3, [pc, #228]	@ (800208c <HAL_RCC_OscConfig+0x470>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa8:	4a38      	ldr	r2, [pc, #224]	@ (800208c <HAL_RCC_OscConfig+0x470>)
 8001faa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80a1 	beq.w	80020fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fba:	4b34      	ldr	r3, [pc, #208]	@ (800208c <HAL_RCC_OscConfig+0x470>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d05c      	beq.n	8002080 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d141      	bne.n	8002052 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fce:	4b31      	ldr	r3, [pc, #196]	@ (8002094 <HAL_RCC_OscConfig+0x478>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7ff fb36 	bl	8001644 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fdc:	f7ff fb32 	bl	8001644 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e087      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fee:	4b27      	ldr	r3, [pc, #156]	@ (800208c <HAL_RCC_OscConfig+0x470>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f0      	bne.n	8001fdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69da      	ldr	r2, [r3, #28]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002008:	019b      	lsls	r3, r3, #6
 800200a:	431a      	orrs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002010:	085b      	lsrs	r3, r3, #1
 8002012:	3b01      	subs	r3, #1
 8002014:	041b      	lsls	r3, r3, #16
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201c:	061b      	lsls	r3, r3, #24
 800201e:	491b      	ldr	r1, [pc, #108]	@ (800208c <HAL_RCC_OscConfig+0x470>)
 8002020:	4313      	orrs	r3, r2
 8002022:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002024:	4b1b      	ldr	r3, [pc, #108]	@ (8002094 <HAL_RCC_OscConfig+0x478>)
 8002026:	2201      	movs	r2, #1
 8002028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202a:	f7ff fb0b 	bl	8001644 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002032:	f7ff fb07 	bl	8001644 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e05c      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002044:	4b11      	ldr	r3, [pc, #68]	@ (800208c <HAL_RCC_OscConfig+0x470>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0f0      	beq.n	8002032 <HAL_RCC_OscConfig+0x416>
 8002050:	e054      	b.n	80020fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002052:	4b10      	ldr	r3, [pc, #64]	@ (8002094 <HAL_RCC_OscConfig+0x478>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7ff faf4 	bl	8001644 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002060:	f7ff faf0 	bl	8001644 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e045      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002072:	4b06      	ldr	r3, [pc, #24]	@ (800208c <HAL_RCC_OscConfig+0x470>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x444>
 800207e:	e03d      	b.n	80020fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d107      	bne.n	8002098 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e038      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
 800208c:	40023800 	.word	0x40023800
 8002090:	40007000 	.word	0x40007000
 8002094:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002098:	4b1b      	ldr	r3, [pc, #108]	@ (8002108 <HAL_RCC_OscConfig+0x4ec>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d028      	beq.n	80020f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d121      	bne.n	80020f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020be:	429a      	cmp	r2, r3
 80020c0:	d11a      	bne.n	80020f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020c8:	4013      	ands	r3, r2
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d111      	bne.n	80020f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020de:	085b      	lsrs	r3, r3, #1
 80020e0:	3b01      	subs	r3, #1
 80020e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d107      	bne.n	80020f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800

0800210c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0cc      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002120:	4b68      	ldr	r3, [pc, #416]	@ (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d90c      	bls.n	8002148 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b65      	ldr	r3, [pc, #404]	@ (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002136:	4b63      	ldr	r3, [pc, #396]	@ (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d001      	beq.n	8002148 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0b8      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d020      	beq.n	8002196 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002160:	4b59      	ldr	r3, [pc, #356]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4a58      	ldr	r2, [pc, #352]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800216a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002178:	4b53      	ldr	r3, [pc, #332]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	4a52      	ldr	r2, [pc, #328]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002182:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002184:	4b50      	ldr	r3, [pc, #320]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	494d      	ldr	r1, [pc, #308]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	4313      	orrs	r3, r2
 8002194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d044      	beq.n	800222c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021aa:	4b47      	ldr	r3, [pc, #284]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d119      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e07f      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d003      	beq.n	80021ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d107      	bne.n	80021da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ca:	4b3f      	ldr	r3, [pc, #252]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e06f      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021da:	4b3b      	ldr	r3, [pc, #236]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e067      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ea:	4b37      	ldr	r3, [pc, #220]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f023 0203 	bic.w	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	4934      	ldr	r1, [pc, #208]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021fc:	f7ff fa22 	bl	8001644 <HAL_GetTick>
 8002200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002202:	e00a      	b.n	800221a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002204:	f7ff fa1e 	bl	8001644 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002212:	4293      	cmp	r3, r2
 8002214:	d901      	bls.n	800221a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e04f      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	4b2b      	ldr	r3, [pc, #172]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 020c 	and.w	r2, r3, #12
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	429a      	cmp	r2, r3
 800222a:	d1eb      	bne.n	8002204 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800222c:	4b25      	ldr	r3, [pc, #148]	@ (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d20c      	bcs.n	8002254 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b22      	ldr	r3, [pc, #136]	@ (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002242:	4b20      	ldr	r3, [pc, #128]	@ (80022c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d001      	beq.n	8002254 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e032      	b.n	80022ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002260:	4b19      	ldr	r3, [pc, #100]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4916      	ldr	r1, [pc, #88]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	4313      	orrs	r3, r2
 8002270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d009      	beq.n	8002292 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800227e:	4b12      	ldr	r3, [pc, #72]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	490e      	ldr	r1, [pc, #56]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	4313      	orrs	r3, r2
 8002290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002292:	f000 f821 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8002296:	4602      	mov	r2, r0
 8002298:	4b0b      	ldr	r3, [pc, #44]	@ (80022c8 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	091b      	lsrs	r3, r3, #4
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	490a      	ldr	r1, [pc, #40]	@ (80022cc <HAL_RCC_ClockConfig+0x1c0>)
 80022a4:	5ccb      	ldrb	r3, [r1, r3]
 80022a6:	fa22 f303 	lsr.w	r3, r2, r3
 80022aa:	4a09      	ldr	r2, [pc, #36]	@ (80022d0 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80022ae:	4b09      	ldr	r3, [pc, #36]	@ (80022d4 <HAL_RCC_ClockConfig+0x1c8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff f982 	bl	80015bc <HAL_InitTick>

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40023c00 	.word	0x40023c00
 80022c8:	40023800 	.word	0x40023800
 80022cc:	08002b70 	.word	0x08002b70
 80022d0:	20000004 	.word	0x20000004
 80022d4:	20000008 	.word	0x20000008

080022d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022dc:	b094      	sub	sp, #80	@ 0x50
 80022de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022f0:	4b79      	ldr	r3, [pc, #484]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 030c 	and.w	r3, r3, #12
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d00d      	beq.n	8002318 <HAL_RCC_GetSysClockFreq+0x40>
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	f200 80e1 	bhi.w	80024c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0x34>
 8002306:	2b04      	cmp	r3, #4
 8002308:	d003      	beq.n	8002312 <HAL_RCC_GetSysClockFreq+0x3a>
 800230a:	e0db      	b.n	80024c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800230c:	4b73      	ldr	r3, [pc, #460]	@ (80024dc <HAL_RCC_GetSysClockFreq+0x204>)
 800230e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002310:	e0db      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002312:	4b73      	ldr	r3, [pc, #460]	@ (80024e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002314:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002316:	e0d8      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002318:	4b6f      	ldr	r3, [pc, #444]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002320:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002322:	4b6d      	ldr	r3, [pc, #436]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d063      	beq.n	80023f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800232e:	4b6a      	ldr	r3, [pc, #424]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	099b      	lsrs	r3, r3, #6
 8002334:	2200      	movs	r2, #0
 8002336:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002338:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800233a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800233c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002340:	633b      	str	r3, [r7, #48]	@ 0x30
 8002342:	2300      	movs	r3, #0
 8002344:	637b      	str	r3, [r7, #52]	@ 0x34
 8002346:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800234a:	4622      	mov	r2, r4
 800234c:	462b      	mov	r3, r5
 800234e:	f04f 0000 	mov.w	r0, #0
 8002352:	f04f 0100 	mov.w	r1, #0
 8002356:	0159      	lsls	r1, r3, #5
 8002358:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800235c:	0150      	lsls	r0, r2, #5
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4621      	mov	r1, r4
 8002364:	1a51      	subs	r1, r2, r1
 8002366:	6139      	str	r1, [r7, #16]
 8002368:	4629      	mov	r1, r5
 800236a:	eb63 0301 	sbc.w	r3, r3, r1
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800237c:	4659      	mov	r1, fp
 800237e:	018b      	lsls	r3, r1, #6
 8002380:	4651      	mov	r1, sl
 8002382:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002386:	4651      	mov	r1, sl
 8002388:	018a      	lsls	r2, r1, #6
 800238a:	4651      	mov	r1, sl
 800238c:	ebb2 0801 	subs.w	r8, r2, r1
 8002390:	4659      	mov	r1, fp
 8002392:	eb63 0901 	sbc.w	r9, r3, r1
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023aa:	4690      	mov	r8, r2
 80023ac:	4699      	mov	r9, r3
 80023ae:	4623      	mov	r3, r4
 80023b0:	eb18 0303 	adds.w	r3, r8, r3
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	462b      	mov	r3, r5
 80023b8:	eb49 0303 	adc.w	r3, r9, r3
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023ca:	4629      	mov	r1, r5
 80023cc:	024b      	lsls	r3, r1, #9
 80023ce:	4621      	mov	r1, r4
 80023d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023d4:	4621      	mov	r1, r4
 80023d6:	024a      	lsls	r2, r1, #9
 80023d8:	4610      	mov	r0, r2
 80023da:	4619      	mov	r1, r3
 80023dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023de:	2200      	movs	r2, #0
 80023e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80023e8:	f7fd feee 	bl	80001c8 <__aeabi_uldivmod>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4613      	mov	r3, r2
 80023f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023f4:	e058      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f6:	4b38      	ldr	r3, [pc, #224]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	099b      	lsrs	r3, r3, #6
 80023fc:	2200      	movs	r2, #0
 80023fe:	4618      	mov	r0, r3
 8002400:	4611      	mov	r1, r2
 8002402:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002406:	623b      	str	r3, [r7, #32]
 8002408:	2300      	movs	r3, #0
 800240a:	627b      	str	r3, [r7, #36]	@ 0x24
 800240c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002410:	4642      	mov	r2, r8
 8002412:	464b      	mov	r3, r9
 8002414:	f04f 0000 	mov.w	r0, #0
 8002418:	f04f 0100 	mov.w	r1, #0
 800241c:	0159      	lsls	r1, r3, #5
 800241e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002422:	0150      	lsls	r0, r2, #5
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4641      	mov	r1, r8
 800242a:	ebb2 0a01 	subs.w	sl, r2, r1
 800242e:	4649      	mov	r1, r9
 8002430:	eb63 0b01 	sbc.w	fp, r3, r1
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002440:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002444:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002448:	ebb2 040a 	subs.w	r4, r2, sl
 800244c:	eb63 050b 	sbc.w	r5, r3, fp
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	f04f 0300 	mov.w	r3, #0
 8002458:	00eb      	lsls	r3, r5, #3
 800245a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800245e:	00e2      	lsls	r2, r4, #3
 8002460:	4614      	mov	r4, r2
 8002462:	461d      	mov	r5, r3
 8002464:	4643      	mov	r3, r8
 8002466:	18e3      	adds	r3, r4, r3
 8002468:	603b      	str	r3, [r7, #0]
 800246a:	464b      	mov	r3, r9
 800246c:	eb45 0303 	adc.w	r3, r5, r3
 8002470:	607b      	str	r3, [r7, #4]
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800247e:	4629      	mov	r1, r5
 8002480:	028b      	lsls	r3, r1, #10
 8002482:	4621      	mov	r1, r4
 8002484:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002488:	4621      	mov	r1, r4
 800248a:	028a      	lsls	r2, r1, #10
 800248c:	4610      	mov	r0, r2
 800248e:	4619      	mov	r1, r3
 8002490:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002492:	2200      	movs	r2, #0
 8002494:	61bb      	str	r3, [r7, #24]
 8002496:	61fa      	str	r2, [r7, #28]
 8002498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800249c:	f7fd fe94 	bl	80001c8 <__aeabi_uldivmod>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4613      	mov	r3, r2
 80024a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80024a8:	4b0b      	ldr	r3, [pc, #44]	@ (80024d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	0c1b      	lsrs	r3, r3, #16
 80024ae:	f003 0303 	and.w	r3, r3, #3
 80024b2:	3301      	adds	r3, #1
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80024b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024c2:	e002      	b.n	80024ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024c4:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <HAL_RCC_GetSysClockFreq+0x204>)
 80024c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3750      	adds	r7, #80	@ 0x50
 80024d0:	46bd      	mov	sp, r7
 80024d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800
 80024dc:	00f42400 	.word	0x00f42400
 80024e0:	007a1200 	.word	0x007a1200

080024e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e041      	b.n	800257a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe ffe8 	bl	80014e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3304      	adds	r3, #4
 8002520:	4619      	mov	r1, r3
 8002522:	4610      	mov	r0, r2
 8002524:	f000 f9b6 	bl	8002894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b01      	cmp	r3, #1
 8002596:	d001      	beq.n	800259c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e04e      	b.n	800263a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a23      	ldr	r2, [pc, #140]	@ (8002648 <HAL_TIM_Base_Start_IT+0xc4>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d022      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x80>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025c6:	d01d      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x80>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a1f      	ldr	r2, [pc, #124]	@ (800264c <HAL_TIM_Base_Start_IT+0xc8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d018      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x80>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002650 <HAL_TIM_Base_Start_IT+0xcc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d013      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x80>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002654 <HAL_TIM_Base_Start_IT+0xd0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00e      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x80>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002658 <HAL_TIM_Base_Start_IT+0xd4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d009      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x80>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a19      	ldr	r2, [pc, #100]	@ (800265c <HAL_TIM_Base_Start_IT+0xd8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d004      	beq.n	8002604 <HAL_TIM_Base_Start_IT+0x80>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a18      	ldr	r2, [pc, #96]	@ (8002660 <HAL_TIM_Base_Start_IT+0xdc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d111      	bne.n	8002628 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2b06      	cmp	r3, #6
 8002614:	d010      	beq.n	8002638 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0201 	orr.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002626:	e007      	b.n	8002638 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	40010000 	.word	0x40010000
 800264c:	40000400 	.word	0x40000400
 8002650:	40000800 	.word	0x40000800
 8002654:	40000c00 	.word	0x40000c00
 8002658:	40010400 	.word	0x40010400
 800265c:	40014000 	.word	0x40014000
 8002660:	40001800 	.word	0x40001800

08002664 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d020      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d01b      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0202 	mvn.w	r2, #2
 8002698:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f8d2 	bl	8002858 <HAL_TIM_IC_CaptureCallback>
 80026b4:	e005      	b.n	80026c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f8c4 	bl	8002844 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f8d5 	bl	800286c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d020      	beq.n	8002714 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01b      	beq.n	8002714 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0204 	mvn.w	r2, #4
 80026e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2202      	movs	r2, #2
 80026ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f8ac 	bl	8002858 <HAL_TIM_IC_CaptureCallback>
 8002700:	e005      	b.n	800270e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f89e 	bl	8002844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f8af 	bl	800286c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d020      	beq.n	8002760 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d01b      	beq.n	8002760 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0208 	mvn.w	r2, #8
 8002730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2204      	movs	r2, #4
 8002736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f886 	bl	8002858 <HAL_TIM_IC_CaptureCallback>
 800274c:	e005      	b.n	800275a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f878 	bl	8002844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 f889 	bl	800286c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	2b00      	cmp	r3, #0
 8002768:	d020      	beq.n	80027ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	2b00      	cmp	r3, #0
 8002772:	d01b      	beq.n	80027ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f06f 0210 	mvn.w	r2, #16
 800277c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2208      	movs	r2, #8
 8002782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f860 	bl	8002858 <HAL_TIM_IC_CaptureCallback>
 8002798:	e005      	b.n	80027a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f852 	bl	8002844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f863 	bl	800286c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00c      	beq.n	80027d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d007      	beq.n	80027d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f06f 0201 	mvn.w	r2, #1
 80027c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7fe fdb8 	bl	8001340 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00c      	beq.n	80027f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d007      	beq.n	80027f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80027ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f97c 	bl	8002aec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00c      	beq.n	8002818 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002804:	2b00      	cmp	r3, #0
 8002806:	d007      	beq.n	8002818 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f834 	bl	8002880 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f003 0320 	and.w	r3, r3, #32
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00c      	beq.n	800283c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f003 0320 	and.w	r3, r3, #32
 8002828:	2b00      	cmp	r3, #0
 800282a:	d007      	beq.n	800283c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0220 	mvn.w	r2, #32
 8002834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f94e 	bl	8002ad8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800283c:	bf00      	nop
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a43      	ldr	r2, [pc, #268]	@ (80029b4 <TIM_Base_SetConfig+0x120>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d013      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028b2:	d00f      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a40      	ldr	r2, [pc, #256]	@ (80029b8 <TIM_Base_SetConfig+0x124>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d00b      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a3f      	ldr	r2, [pc, #252]	@ (80029bc <TIM_Base_SetConfig+0x128>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d007      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a3e      	ldr	r2, [pc, #248]	@ (80029c0 <TIM_Base_SetConfig+0x12c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d003      	beq.n	80028d4 <TIM_Base_SetConfig+0x40>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a3d      	ldr	r2, [pc, #244]	@ (80029c4 <TIM_Base_SetConfig+0x130>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d108      	bne.n	80028e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a32      	ldr	r2, [pc, #200]	@ (80029b4 <TIM_Base_SetConfig+0x120>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d02b      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028f4:	d027      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a2f      	ldr	r2, [pc, #188]	@ (80029b8 <TIM_Base_SetConfig+0x124>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d023      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a2e      	ldr	r2, [pc, #184]	@ (80029bc <TIM_Base_SetConfig+0x128>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d01f      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a2d      	ldr	r2, [pc, #180]	@ (80029c0 <TIM_Base_SetConfig+0x12c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d01b      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a2c      	ldr	r2, [pc, #176]	@ (80029c4 <TIM_Base_SetConfig+0x130>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d017      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a2b      	ldr	r2, [pc, #172]	@ (80029c8 <TIM_Base_SetConfig+0x134>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a2a      	ldr	r2, [pc, #168]	@ (80029cc <TIM_Base_SetConfig+0x138>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00f      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a29      	ldr	r2, [pc, #164]	@ (80029d0 <TIM_Base_SetConfig+0x13c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00b      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a28      	ldr	r2, [pc, #160]	@ (80029d4 <TIM_Base_SetConfig+0x140>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d007      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a27      	ldr	r2, [pc, #156]	@ (80029d8 <TIM_Base_SetConfig+0x144>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d003      	beq.n	8002946 <TIM_Base_SetConfig+0xb2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a26      	ldr	r2, [pc, #152]	@ (80029dc <TIM_Base_SetConfig+0x148>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d108      	bne.n	8002958 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800294c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4313      	orrs	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a0e      	ldr	r2, [pc, #56]	@ (80029b4 <TIM_Base_SetConfig+0x120>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d003      	beq.n	8002986 <TIM_Base_SetConfig+0xf2>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a10      	ldr	r2, [pc, #64]	@ (80029c4 <TIM_Base_SetConfig+0x130>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d103      	bne.n	800298e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	691a      	ldr	r2, [r3, #16]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f043 0204 	orr.w	r2, r3, #4
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	601a      	str	r2, [r3, #0]
}
 80029a6:	bf00      	nop
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40010000 	.word	0x40010000
 80029b8:	40000400 	.word	0x40000400
 80029bc:	40000800 	.word	0x40000800
 80029c0:	40000c00 	.word	0x40000c00
 80029c4:	40010400 	.word	0x40010400
 80029c8:	40014000 	.word	0x40014000
 80029cc:	40014400 	.word	0x40014400
 80029d0:	40014800 	.word	0x40014800
 80029d4:	40001800 	.word	0x40001800
 80029d8:	40001c00 	.word	0x40001c00
 80029dc:	40002000 	.word	0x40002000

080029e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e05a      	b.n	8002aae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a21      	ldr	r2, [pc, #132]	@ (8002abc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d022      	beq.n	8002a82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a44:	d01d      	beq.n	8002a82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ac0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d018      	beq.n	8002a82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a1b      	ldr	r2, [pc, #108]	@ (8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d013      	beq.n	8002a82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ac8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d00e      	beq.n	8002a82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a18      	ldr	r2, [pc, #96]	@ (8002acc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d009      	beq.n	8002a82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a17      	ldr	r2, [pc, #92]	@ (8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d004      	beq.n	8002a82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a15      	ldr	r2, [pc, #84]	@ (8002ad4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d10c      	bne.n	8002a9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40010000 	.word	0x40010000
 8002ac0:	40000400 	.word	0x40000400
 8002ac4:	40000800 	.word	0x40000800
 8002ac8:	40000c00 	.word	0x40000c00
 8002acc:	40010400 	.word	0x40010400
 8002ad0:	40014000 	.word	0x40014000
 8002ad4:	40001800 	.word	0x40001800

08002ad8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <memset>:
 8002b00:	4402      	add	r2, r0
 8002b02:	4603      	mov	r3, r0
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d100      	bne.n	8002b0a <memset+0xa>
 8002b08:	4770      	bx	lr
 8002b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b0e:	e7f9      	b.n	8002b04 <memset+0x4>

08002b10 <__libc_init_array>:
 8002b10:	b570      	push	{r4, r5, r6, lr}
 8002b12:	4d0d      	ldr	r5, [pc, #52]	@ (8002b48 <__libc_init_array+0x38>)
 8002b14:	4c0d      	ldr	r4, [pc, #52]	@ (8002b4c <__libc_init_array+0x3c>)
 8002b16:	1b64      	subs	r4, r4, r5
 8002b18:	10a4      	asrs	r4, r4, #2
 8002b1a:	2600      	movs	r6, #0
 8002b1c:	42a6      	cmp	r6, r4
 8002b1e:	d109      	bne.n	8002b34 <__libc_init_array+0x24>
 8002b20:	4d0b      	ldr	r5, [pc, #44]	@ (8002b50 <__libc_init_array+0x40>)
 8002b22:	4c0c      	ldr	r4, [pc, #48]	@ (8002b54 <__libc_init_array+0x44>)
 8002b24:	f000 f818 	bl	8002b58 <_init>
 8002b28:	1b64      	subs	r4, r4, r5
 8002b2a:	10a4      	asrs	r4, r4, #2
 8002b2c:	2600      	movs	r6, #0
 8002b2e:	42a6      	cmp	r6, r4
 8002b30:	d105      	bne.n	8002b3e <__libc_init_array+0x2e>
 8002b32:	bd70      	pop	{r4, r5, r6, pc}
 8002b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b38:	4798      	blx	r3
 8002b3a:	3601      	adds	r6, #1
 8002b3c:	e7ee      	b.n	8002b1c <__libc_init_array+0xc>
 8002b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b42:	4798      	blx	r3
 8002b44:	3601      	adds	r6, #1
 8002b46:	e7f2      	b.n	8002b2e <__libc_init_array+0x1e>
 8002b48:	08002b88 	.word	0x08002b88
 8002b4c:	08002b88 	.word	0x08002b88
 8002b50:	08002b88 	.word	0x08002b88
 8002b54:	08002b8c 	.word	0x08002b8c

08002b58 <_init>:
 8002b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b5a:	bf00      	nop
 8002b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b5e:	bc08      	pop	{r3}
 8002b60:	469e      	mov	lr, r3
 8002b62:	4770      	bx	lr

08002b64 <_fini>:
 8002b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b66:	bf00      	nop
 8002b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b6a:	bc08      	pop	{r3}
 8002b6c:	469e      	mov	lr, r3
 8002b6e:	4770      	bx	lr
